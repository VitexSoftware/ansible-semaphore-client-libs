=begin
#API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.8.34

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  class Template
    attr_accessor :id

    attr_accessor :project_id

    attr_accessor :inventory_id

    attr_accessor :repository_id

    attr_accessor :environment_id

    attr_accessor :view_id

    attr_accessor :_alias

    attr_accessor :playbook

    attr_accessor :arguments

    attr_accessor :description

    attr_accessor :override_args

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'project_id' => :'project_id',
        :'inventory_id' => :'inventory_id',
        :'repository_id' => :'repository_id',
        :'environment_id' => :'environment_id',
        :'view_id' => :'view_id',
        :'_alias' => :'alias',
        :'playbook' => :'playbook',
        :'arguments' => :'arguments',
        :'description' => :'description',
        :'override_args' => :'override_args'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'project_id' => :'Integer',
        :'inventory_id' => :'Integer',
        :'repository_id' => :'Integer',
        :'environment_id' => :'Integer',
        :'view_id' => :'Integer',
        :'_alias' => :'String',
        :'playbook' => :'String',
        :'arguments' => :'String',
        :'description' => :'String',
        :'override_args' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Template` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Template`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'project_id')
        self.project_id = attributes[:'project_id']
      end

      if attributes.key?(:'inventory_id')
        self.inventory_id = attributes[:'inventory_id']
      end

      if attributes.key?(:'repository_id')
        self.repository_id = attributes[:'repository_id']
      end

      if attributes.key?(:'environment_id')
        self.environment_id = attributes[:'environment_id']
      end

      if attributes.key?(:'view_id')
        self.view_id = attributes[:'view_id']
      end

      if attributes.key?(:'_alias')
        self._alias = attributes[:'_alias']
      end

      if attributes.key?(:'playbook')
        self.playbook = attributes[:'playbook']
      end

      if attributes.key?(:'arguments')
        self.arguments = attributes[:'arguments']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'override_args')
        self.override_args = attributes[:'override_args']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@id.nil? && @id < 1
        invalid_properties.push('invalid value for "id", must be greater than or equal to 1.')
      end

      if !@project_id.nil? && @project_id < 1
        invalid_properties.push('invalid value for "project_id", must be greater than or equal to 1.')
      end

      if !@inventory_id.nil? && @inventory_id < 1
        invalid_properties.push('invalid value for "inventory_id", must be greater than or equal to 1.')
      end

      if !@environment_id.nil? && @environment_id < 1
        invalid_properties.push('invalid value for "environment_id", must be greater than or equal to 1.')
      end

      if !@view_id.nil? && @view_id < 1
        invalid_properties.push('invalid value for "view_id", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@id.nil? && @id < 1
      return false if !@project_id.nil? && @project_id < 1
      return false if !@inventory_id.nil? && @inventory_id < 1
      return false if !@environment_id.nil? && @environment_id < 1
      return false if !@view_id.nil? && @view_id < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if !id.nil? && id < 1
        fail ArgumentError, 'invalid value for "id", must be greater than or equal to 1.'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] project_id Value to be assigned
    def project_id=(project_id)
      if !project_id.nil? && project_id < 1
        fail ArgumentError, 'invalid value for "project_id", must be greater than or equal to 1.'
      end

      @project_id = project_id
    end

    # Custom attribute writer method with validation
    # @param [Object] inventory_id Value to be assigned
    def inventory_id=(inventory_id)
      if !inventory_id.nil? && inventory_id < 1
        fail ArgumentError, 'invalid value for "inventory_id", must be greater than or equal to 1.'
      end

      @inventory_id = inventory_id
    end

    # Custom attribute writer method with validation
    # @param [Object] environment_id Value to be assigned
    def environment_id=(environment_id)
      if !environment_id.nil? && environment_id < 1
        fail ArgumentError, 'invalid value for "environment_id", must be greater than or equal to 1.'
      end

      @environment_id = environment_id
    end

    # Custom attribute writer method with validation
    # @param [Object] view_id Value to be assigned
    def view_id=(view_id)
      if !view_id.nil? && view_id < 1
        fail ArgumentError, 'invalid value for "view_id", must be greater than or equal to 1.'
      end

      @view_id = view_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          project_id == o.project_id &&
          inventory_id == o.inventory_id &&
          repository_id == o.repository_id &&
          environment_id == o.environment_id &&
          view_id == o.view_id &&
          _alias == o._alias &&
          playbook == o.playbook &&
          arguments == o.arguments &&
          description == o.description &&
          override_args == o.override_args
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, project_id, inventory_id, repository_id, environment_id, view_id, _alias, playbook, arguments, description, override_args].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
