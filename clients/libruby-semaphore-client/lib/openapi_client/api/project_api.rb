=begin
#API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.8.34

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class ProjectApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete project
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_delete(project_id, opts = {})
      project_project_id_delete_with_http_info(project_id, opts)
      nil
    end

    # Delete project
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_delete_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_delete"
      end
      # resource path
      local_var_path = '/project/{project_id}/'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes environment
    # @param project_id [Integer] Project ID
    # @param environment_id [Integer] environment ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_environment_environment_id_delete(project_id, environment_id, opts = {})
      project_project_id_environment_environment_id_delete_with_http_info(project_id, environment_id, opts)
      nil
    end

    # Removes environment
    # @param project_id [Integer] Project ID
    # @param environment_id [Integer] environment ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_environment_environment_id_delete_with_http_info(project_id, environment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_environment_environment_id_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_environment_environment_id_delete"
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling ProjectApi.project_project_id_environment_environment_id_delete"
      end
      # resource path
      local_var_path = '/project/{project_id}/environment/{environment_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'environment_id' + '}', CGI.escape(environment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_environment_environment_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_environment_environment_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update environment
    # @param project_id [Integer] Project ID
    # @param environment_id [Integer] environment ID
    # @param environment [EnvironmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_environment_environment_id_put(project_id, environment_id, environment, opts = {})
      project_project_id_environment_environment_id_put_with_http_info(project_id, environment_id, environment, opts)
      nil
    end

    # Update environment
    # @param project_id [Integer] Project ID
    # @param environment_id [Integer] environment ID
    # @param environment [EnvironmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_environment_environment_id_put_with_http_info(project_id, environment_id, environment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_environment_environment_id_put ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_environment_environment_id_put"
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling ProjectApi.project_project_id_environment_environment_id_put"
      end
      # verify the required parameter 'environment' is set
      if @api_client.config.client_side_validation && environment.nil?
        fail ArgumentError, "Missing the required parameter 'environment' when calling ProjectApi.project_project_id_environment_environment_id_put"
      end
      # resource path
      local_var_path = '/project/{project_id}/environment/{environment_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'environment_id' + '}', CGI.escape(environment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(environment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_environment_environment_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_environment_environment_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get environment
    # @param project_id [Integer] Project ID
    # @param sort [String] sorting name
    # @param order [String] ordering manner
    # @param [Hash] opts the optional parameters
    # @return [Array<Environment>]
    def project_project_id_environment_get(project_id, sort, order, opts = {})
      data, _status_code, _headers = project_project_id_environment_get_with_http_info(project_id, sort, order, opts)
      data
    end

    # Get environment
    # @param project_id [Integer] Project ID
    # @param sort [String] sorting name
    # @param order [String] ordering manner
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Environment>, Integer, Hash)>] Array<Environment> data, response status code and response headers
    def project_project_id_environment_get_with_http_info(project_id, sort, order, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_environment_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_environment_get"
      end
      # verify the required parameter 'sort' is set
      if @api_client.config.client_side_validation && sort.nil?
        fail ArgumentError, "Missing the required parameter 'sort' when calling ProjectApi.project_project_id_environment_get"
      end
      # verify the required parameter 'order' is set
      if @api_client.config.client_side_validation && order.nil?
        fail ArgumentError, "Missing the required parameter 'order' when calling ProjectApi.project_project_id_environment_get"
      end
      # resource path
      local_var_path = '/project/{project_id}/environment'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = sort
      query_params[:'order'] = order

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Environment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_environment_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_environment_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add environment
    # @param project_id [Integer] Project ID
    # @param environment [EnvironmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_environment_post(project_id, environment, opts = {})
      project_project_id_environment_post_with_http_info(project_id, environment, opts)
      nil
    end

    # Add environment
    # @param project_id [Integer] Project ID
    # @param environment [EnvironmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_environment_post_with_http_info(project_id, environment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_environment_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_environment_post"
      end
      # verify the required parameter 'environment' is set
      if @api_client.config.client_side_validation && environment.nil?
        fail ArgumentError, "Missing the required parameter 'environment' when calling ProjectApi.project_project_id_environment_post"
      end
      # resource path
      local_var_path = '/project/{project_id}/environment'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(environment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_environment_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_environment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Events related to this project
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<Event>]
    def project_project_id_events_get(project_id, opts = {})
      data, _status_code, _headers = project_project_id_events_get_with_http_info(project_id, opts)
      data
    end

    # Get Events related to this project
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Event>, Integer, Hash)>] Array<Event> data, response status code and response headers
    def project_project_id_events_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_events_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_events_get"
      end
      # resource path
      local_var_path = '/project/{project_id}/events'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Event>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_events_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch project
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def project_project_id_get(project_id, opts = {})
      data, _status_code, _headers = project_project_id_get_with_http_info(project_id, opts)
      data
    end

    # Fetch project
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def project_project_id_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_get"
      end
      # resource path
      local_var_path = '/project/{project_id}/'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get inventory
    # @param project_id [Integer] Project ID
    # @param sort [String] sorting name
    # @param order [String] ordering manner
    # @param [Hash] opts the optional parameters
    # @return [Array<Inventory>]
    def project_project_id_inventory_get(project_id, sort, order, opts = {})
      data, _status_code, _headers = project_project_id_inventory_get_with_http_info(project_id, sort, order, opts)
      data
    end

    # Get inventory
    # @param project_id [Integer] Project ID
    # @param sort [String] sorting name
    # @param order [String] ordering manner
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Inventory>, Integer, Hash)>] Array<Inventory> data, response status code and response headers
    def project_project_id_inventory_get_with_http_info(project_id, sort, order, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_inventory_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_inventory_get"
      end
      # verify the required parameter 'sort' is set
      if @api_client.config.client_side_validation && sort.nil?
        fail ArgumentError, "Missing the required parameter 'sort' when calling ProjectApi.project_project_id_inventory_get"
      end
      # verify enum value
      allowable_values = ["name", "type"]
      if @api_client.config.client_side_validation && !allowable_values.include?(sort)
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'order' is set
      if @api_client.config.client_side_validation && order.nil?
        fail ArgumentError, "Missing the required parameter 'order' when calling ProjectApi.project_project_id_inventory_get"
      end
      # verify enum value
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && !allowable_values.include?(order)
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/project/{project_id}/inventory'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = sort
      query_params[:'order'] = order

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Inventory>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_inventory_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_inventory_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes inventory
    # @param project_id [Integer] Project ID
    # @param inventory_id [Integer] inventory ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_inventory_inventory_id_delete(project_id, inventory_id, opts = {})
      project_project_id_inventory_inventory_id_delete_with_http_info(project_id, inventory_id, opts)
      nil
    end

    # Removes inventory
    # @param project_id [Integer] Project ID
    # @param inventory_id [Integer] inventory ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_inventory_inventory_id_delete_with_http_info(project_id, inventory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_inventory_inventory_id_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_inventory_inventory_id_delete"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling ProjectApi.project_project_id_inventory_inventory_id_delete"
      end
      # resource path
      local_var_path = '/project/{project_id}/inventory/{inventory_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'inventory_id' + '}', CGI.escape(inventory_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_inventory_inventory_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_inventory_inventory_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates inventory
    # @param project_id [Integer] Project ID
    # @param inventory_id [Integer] inventory ID
    # @param inventory [InventoryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_inventory_inventory_id_put(project_id, inventory_id, inventory, opts = {})
      project_project_id_inventory_inventory_id_put_with_http_info(project_id, inventory_id, inventory, opts)
      nil
    end

    # Updates inventory
    # @param project_id [Integer] Project ID
    # @param inventory_id [Integer] inventory ID
    # @param inventory [InventoryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_inventory_inventory_id_put_with_http_info(project_id, inventory_id, inventory, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_inventory_inventory_id_put ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_inventory_inventory_id_put"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling ProjectApi.project_project_id_inventory_inventory_id_put"
      end
      # verify the required parameter 'inventory' is set
      if @api_client.config.client_side_validation && inventory.nil?
        fail ArgumentError, "Missing the required parameter 'inventory' when calling ProjectApi.project_project_id_inventory_inventory_id_put"
      end
      # resource path
      local_var_path = '/project/{project_id}/inventory/{inventory_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'inventory_id' + '}', CGI.escape(inventory_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inventory)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_inventory_inventory_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_inventory_inventory_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create inventory
    # @param project_id [Integer] Project ID
    # @param inventory [InventoryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Inventory]
    def project_project_id_inventory_post(project_id, inventory, opts = {})
      data, _status_code, _headers = project_project_id_inventory_post_with_http_info(project_id, inventory, opts)
      data
    end

    # create inventory
    # @param project_id [Integer] Project ID
    # @param inventory [InventoryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Inventory, Integer, Hash)>] Inventory data, response status code and response headers
    def project_project_id_inventory_post_with_http_info(project_id, inventory, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_inventory_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_inventory_post"
      end
      # verify the required parameter 'inventory' is set
      if @api_client.config.client_side_validation && inventory.nil?
        fail ArgumentError, "Missing the required parameter 'inventory' when calling ProjectApi.project_project_id_inventory_post"
      end
      # resource path
      local_var_path = '/project/{project_id}/inventory'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inventory)

      # return_type
      return_type = opts[:debug_return_type] || 'Inventory'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_inventory_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_inventory_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get access keys linked to project
    # @param project_id [Integer] Project ID
    # @param sort [String] sorting name
    # @param order [String] ordering manner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :key_type Filter by key type
    # @return [Array<AccessKey>]
    def project_project_id_keys_get(project_id, sort, order, opts = {})
      data, _status_code, _headers = project_project_id_keys_get_with_http_info(project_id, sort, order, opts)
      data
    end

    # Get access keys linked to project
    # @param project_id [Integer] Project ID
    # @param sort [String] sorting name
    # @param order [String] ordering manner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :key_type Filter by key type
    # @return [Array<(Array<AccessKey>, Integer, Hash)>] Array<AccessKey> data, response status code and response headers
    def project_project_id_keys_get_with_http_info(project_id, sort, order, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_keys_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_keys_get"
      end
      # verify the required parameter 'sort' is set
      if @api_client.config.client_side_validation && sort.nil?
        fail ArgumentError, "Missing the required parameter 'sort' when calling ProjectApi.project_project_id_keys_get"
      end
      # verify enum value
      allowable_values = ["name", "type"]
      if @api_client.config.client_side_validation && !allowable_values.include?(sort)
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'order' is set
      if @api_client.config.client_side_validation && order.nil?
        fail ArgumentError, "Missing the required parameter 'order' when calling ProjectApi.project_project_id_keys_get"
      end
      # verify enum value
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && !allowable_values.include?(order)
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      allowable_values = ["none", "ssh", "login_password"]
      if @api_client.config.client_side_validation && opts[:'key_type'] && !allowable_values.include?(opts[:'key_type'])
        fail ArgumentError, "invalid value for \"key_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/project/{project_id}/keys'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = sort
      query_params[:'order'] = order
      query_params[:'Key type'] = opts[:'key_type'] if !opts[:'key_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AccessKey>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_keys_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_keys_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes access key
    # @param project_id [Integer] Project ID
    # @param key_id [Integer] key ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_keys_key_id_delete(project_id, key_id, opts = {})
      project_project_id_keys_key_id_delete_with_http_info(project_id, key_id, opts)
      nil
    end

    # Removes access key
    # @param project_id [Integer] Project ID
    # @param key_id [Integer] key ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_keys_key_id_delete_with_http_info(project_id, key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_keys_key_id_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_keys_key_id_delete"
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling ProjectApi.project_project_id_keys_key_id_delete"
      end
      # resource path
      local_var_path = '/project/{project_id}/keys/{key_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'key_id' + '}', CGI.escape(key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_keys_key_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_keys_key_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates access key
    # @param project_id [Integer] Project ID
    # @param key_id [Integer] key ID
    # @param access_key [AccessKeyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_keys_key_id_put(project_id, key_id, access_key, opts = {})
      project_project_id_keys_key_id_put_with_http_info(project_id, key_id, access_key, opts)
      nil
    end

    # Updates access key
    # @param project_id [Integer] Project ID
    # @param key_id [Integer] key ID
    # @param access_key [AccessKeyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_keys_key_id_put_with_http_info(project_id, key_id, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_keys_key_id_put ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_keys_key_id_put"
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling ProjectApi.project_project_id_keys_key_id_put"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ProjectApi.project_project_id_keys_key_id_put"
      end
      # resource path
      local_var_path = '/project/{project_id}/keys/{key_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'key_id' + '}', CGI.escape(key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(access_key)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_keys_key_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_keys_key_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add access key
    # @param project_id [Integer] Project ID
    # @param access_key [AccessKeyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_keys_post(project_id, access_key, opts = {})
      project_project_id_keys_post_with_http_info(project_id, access_key, opts)
      nil
    end

    # Add access key
    # @param project_id [Integer] Project ID
    # @param access_key [AccessKeyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_keys_post_with_http_info(project_id, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_keys_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_keys_post"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ProjectApi.project_project_id_keys_post"
      end
      # resource path
      local_var_path = '/project/{project_id}/keys'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(access_key)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_keys_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_keys_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update project
    # @param project_id [Integer] Project ID
    # @param project [ProjectProjectIdDeleteRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_put(project_id, project, opts = {})
      project_project_id_put_with_http_info(project_id, project, opts)
      nil
    end

    # Update project
    # @param project_id [Integer] Project ID
    # @param project [ProjectProjectIdDeleteRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_put_with_http_info(project_id, project, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_put ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_put"
      end
      # verify the required parameter 'project' is set
      if @api_client.config.client_side_validation && project.nil?
        fail ArgumentError, "Missing the required parameter 'project' when calling ProjectApi.project_project_id_put"
      end
      # resource path
      local_var_path = '/project/{project_id}/'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(project)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get repositories
    # @param project_id [Integer] Project ID
    # @param sort [String] sorting name
    # @param order [String] ordering manner
    # @param [Hash] opts the optional parameters
    # @return [Array<Repository>]
    def project_project_id_repositories_get(project_id, sort, order, opts = {})
      data, _status_code, _headers = project_project_id_repositories_get_with_http_info(project_id, sort, order, opts)
      data
    end

    # Get repositories
    # @param project_id [Integer] Project ID
    # @param sort [String] sorting name
    # @param order [String] ordering manner
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Repository>, Integer, Hash)>] Array<Repository> data, response status code and response headers
    def project_project_id_repositories_get_with_http_info(project_id, sort, order, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_repositories_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_repositories_get"
      end
      # verify the required parameter 'sort' is set
      if @api_client.config.client_side_validation && sort.nil?
        fail ArgumentError, "Missing the required parameter 'sort' when calling ProjectApi.project_project_id_repositories_get"
      end
      # verify enum value
      allowable_values = ["name", "git_url", "ssh_key"]
      if @api_client.config.client_side_validation && !allowable_values.include?(sort)
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'order' is set
      if @api_client.config.client_side_validation && order.nil?
        fail ArgumentError, "Missing the required parameter 'order' when calling ProjectApi.project_project_id_repositories_get"
      end
      # verify enum value
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && !allowable_values.include?(order)
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/project/{project_id}/repositories'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = sort
      query_params[:'order'] = order

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Repository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_repositories_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_repositories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add repository
    # @param project_id [Integer] Project ID
    # @param repository [RepositoryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_repositories_post(project_id, repository, opts = {})
      project_project_id_repositories_post_with_http_info(project_id, repository, opts)
      nil
    end

    # Add repository
    # @param project_id [Integer] Project ID
    # @param repository [RepositoryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_repositories_post_with_http_info(project_id, repository, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_repositories_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_repositories_post"
      end
      # verify the required parameter 'repository' is set
      if @api_client.config.client_side_validation && repository.nil?
        fail ArgumentError, "Missing the required parameter 'repository' when calling ProjectApi.project_project_id_repositories_post"
      end
      # resource path
      local_var_path = '/project/{project_id}/repositories'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(repository)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_repositories_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_repositories_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes repository
    # @param project_id [Integer] Project ID
    # @param repository_id [Integer] repository ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_repositories_repository_id_delete(project_id, repository_id, opts = {})
      project_project_id_repositories_repository_id_delete_with_http_info(project_id, repository_id, opts)
      nil
    end

    # Removes repository
    # @param project_id [Integer] Project ID
    # @param repository_id [Integer] repository ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_repositories_repository_id_delete_with_http_info(project_id, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_repositories_repository_id_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_repositories_repository_id_delete"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ProjectApi.project_project_id_repositories_repository_id_delete"
      end
      # resource path
      local_var_path = '/project/{project_id}/repositories/{repository_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_repositories_repository_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_repositories_repository_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Tasks related to current project
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<Task>]
    def project_project_id_tasks_get(project_id, opts = {})
      data, _status_code, _headers = project_project_id_tasks_get_with_http_info(project_id, opts)
      data
    end

    # Get Tasks related to current project
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Task>, Integer, Hash)>] Array<Task> data, response status code and response headers
    def project_project_id_tasks_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_tasks_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_tasks_get"
      end
      # resource path
      local_var_path = '/project/{project_id}/tasks'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Task>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_tasks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_tasks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get last 200 Tasks related to current project
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<Task>]
    def project_project_id_tasks_last_get(project_id, opts = {})
      data, _status_code, _headers = project_project_id_tasks_last_get_with_http_info(project_id, opts)
      data
    end

    # Get last 200 Tasks related to current project
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Task>, Integer, Hash)>] Array<Task> data, response status code and response headers
    def project_project_id_tasks_last_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_tasks_last_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_tasks_last_get"
      end
      # resource path
      local_var_path = '/project/{project_id}/tasks/last'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Task>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_tasks_last_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_tasks_last_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Starts a job
    # @param project_id [Integer] Project ID
    # @param task [ProjectProjectIdTasksGetRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def project_project_id_tasks_post(project_id, task, opts = {})
      data, _status_code, _headers = project_project_id_tasks_post_with_http_info(project_id, task, opts)
      data
    end

    # Starts a job
    # @param project_id [Integer] Project ID
    # @param task [ProjectProjectIdTasksGetRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def project_project_id_tasks_post_with_http_info(project_id, task, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_tasks_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_tasks_post"
      end
      # verify the required parameter 'task' is set
      if @api_client.config.client_side_validation && task.nil?
        fail ArgumentError, "Missing the required parameter 'task' when calling ProjectApi.project_project_id_tasks_post"
      end
      # resource path
      local_var_path = '/project/{project_id}/tasks'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(task)

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_tasks_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_tasks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes task (including output)
    # @param project_id [Integer] Project ID
    # @param task_id [Integer] task ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_tasks_task_id_delete(project_id, task_id, opts = {})
      project_project_id_tasks_task_id_delete_with_http_info(project_id, task_id, opts)
      nil
    end

    # Deletes task (including output)
    # @param project_id [Integer] Project ID
    # @param task_id [Integer] task ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_tasks_task_id_delete_with_http_info(project_id, task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_tasks_task_id_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_tasks_task_id_delete"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling ProjectApi.project_project_id_tasks_task_id_delete"
      end
      # resource path
      local_var_path = '/project/{project_id}/tasks/{task_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_tasks_task_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_tasks_task_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a single task
    # @param project_id [Integer] Project ID
    # @param task_id [Integer] task ID
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def project_project_id_tasks_task_id_get(project_id, task_id, opts = {})
      data, _status_code, _headers = project_project_id_tasks_task_id_get_with_http_info(project_id, task_id, opts)
      data
    end

    # Get a single task
    # @param project_id [Integer] Project ID
    # @param task_id [Integer] task ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def project_project_id_tasks_task_id_get_with_http_info(project_id, task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_tasks_task_id_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_tasks_task_id_get"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling ProjectApi.project_project_id_tasks_task_id_get"
      end
      # resource path
      local_var_path = '/project/{project_id}/tasks/{task_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_tasks_task_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_tasks_task_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get task output
    # @param project_id [Integer] Project ID
    # @param task_id [Integer] task ID
    # @param [Hash] opts the optional parameters
    # @return [Array<TaskOutput>]
    def project_project_id_tasks_task_id_output_get(project_id, task_id, opts = {})
      data, _status_code, _headers = project_project_id_tasks_task_id_output_get_with_http_info(project_id, task_id, opts)
      data
    end

    # Get task output
    # @param project_id [Integer] Project ID
    # @param task_id [Integer] task ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TaskOutput>, Integer, Hash)>] Array<TaskOutput> data, response status code and response headers
    def project_project_id_tasks_task_id_output_get_with_http_info(project_id, task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_tasks_task_id_output_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_tasks_task_id_output_get"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling ProjectApi.project_project_id_tasks_task_id_output_get"
      end
      # resource path
      local_var_path = '/project/{project_id}/tasks/{task_id}/output'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TaskOutput>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_tasks_task_id_output_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_tasks_task_id_output_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get template
    # @param project_id [Integer] Project ID
    # @param sort [String] sorting name
    # @param order [String] ordering manner
    # @param [Hash] opts the optional parameters
    # @return [Array<Template>]
    def project_project_id_templates_get(project_id, sort, order, opts = {})
      data, _status_code, _headers = project_project_id_templates_get_with_http_info(project_id, sort, order, opts)
      data
    end

    # Get template
    # @param project_id [Integer] Project ID
    # @param sort [String] sorting name
    # @param order [String] ordering manner
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Template>, Integer, Hash)>] Array<Template> data, response status code and response headers
    def project_project_id_templates_get_with_http_info(project_id, sort, order, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_templates_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_templates_get"
      end
      # verify the required parameter 'sort' is set
      if @api_client.config.client_side_validation && sort.nil?
        fail ArgumentError, "Missing the required parameter 'sort' when calling ProjectApi.project_project_id_templates_get"
      end
      # verify enum value
      allowable_values = ["alias", "playbook", "ssh_key", "inventory", "environment", "repository"]
      if @api_client.config.client_side_validation && !allowable_values.include?(sort)
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'order' is set
      if @api_client.config.client_side_validation && order.nil?
        fail ArgumentError, "Missing the required parameter 'order' when calling ProjectApi.project_project_id_templates_get"
      end
      # verify enum value
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && !allowable_values.include?(order)
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/project/{project_id}/templates'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = sort
      query_params[:'order'] = order

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Template>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_templates_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create template
    # @param project_id [Integer] Project ID
    # @param template [TemplateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Template]
    def project_project_id_templates_post(project_id, template, opts = {})
      data, _status_code, _headers = project_project_id_templates_post_with_http_info(project_id, template, opts)
      data
    end

    # create template
    # @param project_id [Integer] Project ID
    # @param template [TemplateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Template, Integer, Hash)>] Template data, response status code and response headers
    def project_project_id_templates_post_with_http_info(project_id, template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_templates_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_templates_post"
      end
      # verify the required parameter 'template' is set
      if @api_client.config.client_side_validation && template.nil?
        fail ArgumentError, "Missing the required parameter 'template' when calling ProjectApi.project_project_id_templates_post"
      end
      # resource path
      local_var_path = '/project/{project_id}/templates'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(template)

      # return_type
      return_type = opts[:debug_return_type] || 'Template'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_templates_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_templates_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes template
    # @param project_id [Integer] Project ID
    # @param template_id [Integer] template ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_templates_template_id_delete(project_id, template_id, opts = {})
      project_project_id_templates_template_id_delete_with_http_info(project_id, template_id, opts)
      nil
    end

    # Removes template
    # @param project_id [Integer] Project ID
    # @param template_id [Integer] template ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_templates_template_id_delete_with_http_info(project_id, template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_templates_template_id_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_templates_template_id_delete"
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling ProjectApi.project_project_id_templates_template_id_delete"
      end
      # resource path
      local_var_path = '/project/{project_id}/templates/{template_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'template_id' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_templates_template_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_templates_template_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get template
    # @param project_id [Integer] Project ID
    # @param template_id [Integer] template ID
    # @param [Hash] opts the optional parameters
    # @return [Template]
    def project_project_id_templates_template_id_get(project_id, template_id, opts = {})
      data, _status_code, _headers = project_project_id_templates_template_id_get_with_http_info(project_id, template_id, opts)
      data
    end

    # Get template
    # @param project_id [Integer] Project ID
    # @param template_id [Integer] template ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Template, Integer, Hash)>] Template data, response status code and response headers
    def project_project_id_templates_template_id_get_with_http_info(project_id, template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_templates_template_id_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_templates_template_id_get"
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling ProjectApi.project_project_id_templates_template_id_get"
      end
      # resource path
      local_var_path = '/project/{project_id}/templates/{template_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'template_id' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Template'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_templates_template_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_templates_template_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates template
    # @param project_id [Integer] Project ID
    # @param template_id [Integer] template ID
    # @param template [TemplateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_templates_template_id_put(project_id, template_id, template, opts = {})
      project_project_id_templates_template_id_put_with_http_info(project_id, template_id, template, opts)
      nil
    end

    # Updates template
    # @param project_id [Integer] Project ID
    # @param template_id [Integer] template ID
    # @param template [TemplateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_templates_template_id_put_with_http_info(project_id, template_id, template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_templates_template_id_put ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_templates_template_id_put"
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling ProjectApi.project_project_id_templates_template_id_put"
      end
      # verify the required parameter 'template' is set
      if @api_client.config.client_side_validation && template.nil?
        fail ArgumentError, "Missing the required parameter 'template' when calling ProjectApi.project_project_id_templates_template_id_put"
      end
      # resource path
      local_var_path = '/project/{project_id}/templates/{template_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'template_id' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(template)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_templates_template_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_templates_template_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get users linked to project
    # @param project_id [Integer] Project ID
    # @param sort [String] sorting name
    # @param order [String] ordering manner
    # @param [Hash] opts the optional parameters
    # @return [Array<User>]
    def project_project_id_users_get(project_id, sort, order, opts = {})
      data, _status_code, _headers = project_project_id_users_get_with_http_info(project_id, sort, order, opts)
      data
    end

    # Get users linked to project
    # @param project_id [Integer] Project ID
    # @param sort [String] sorting name
    # @param order [String] ordering manner
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<User>, Integer, Hash)>] Array<User> data, response status code and response headers
    def project_project_id_users_get_with_http_info(project_id, sort, order, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_users_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_users_get"
      end
      # verify the required parameter 'sort' is set
      if @api_client.config.client_side_validation && sort.nil?
        fail ArgumentError, "Missing the required parameter 'sort' when calling ProjectApi.project_project_id_users_get"
      end
      # verify enum value
      allowable_values = ["name", "username", "email", "admin"]
      if @api_client.config.client_side_validation && !allowable_values.include?(sort)
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'order' is set
      if @api_client.config.client_side_validation && order.nil?
        fail ArgumentError, "Missing the required parameter 'order' when calling ProjectApi.project_project_id_users_get"
      end
      # verify enum value
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && !allowable_values.include?(order)
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/project/{project_id}/users'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = sort
      query_params[:'order'] = order

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<User>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_users_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Link user to project
    # @param project_id [Integer] Project ID
    # @param user [ProjectProjectIdUsersGetRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_users_post(project_id, user, opts = {})
      project_project_id_users_post_with_http_info(project_id, user, opts)
      nil
    end

    # Link user to project
    # @param project_id [Integer] Project ID
    # @param user [ProjectProjectIdUsersGetRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_users_post_with_http_info(project_id, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_users_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_users_post"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling ProjectApi.project_project_id_users_post"
      end
      # resource path
      local_var_path = '/project/{project_id}/users'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_users_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_users_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke admin privileges
    # @param project_id [Integer] Project ID
    # @param user_id [Integer] User ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_users_user_id_admin_delete(project_id, user_id, opts = {})
      project_project_id_users_user_id_admin_delete_with_http_info(project_id, user_id, opts)
      nil
    end

    # Revoke admin privileges
    # @param project_id [Integer] Project ID
    # @param user_id [Integer] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_users_user_id_admin_delete_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_users_user_id_admin_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_users_user_id_admin_delete"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ProjectApi.project_project_id_users_user_id_admin_delete"
      end
      # resource path
      local_var_path = '/project/{project_id}/users/{user_id}/admin'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_users_user_id_admin_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_users_user_id_admin_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Makes user admin
    # @param project_id [Integer] Project ID
    # @param user_id [Integer] User ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_users_user_id_admin_post(project_id, user_id, opts = {})
      project_project_id_users_user_id_admin_post_with_http_info(project_id, user_id, opts)
      nil
    end

    # Makes user admin
    # @param project_id [Integer] Project ID
    # @param user_id [Integer] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_users_user_id_admin_post_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_users_user_id_admin_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_users_user_id_admin_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ProjectApi.project_project_id_users_user_id_admin_post"
      end
      # resource path
      local_var_path = '/project/{project_id}/users/{user_id}/admin'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_users_user_id_admin_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_users_user_id_admin_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes user from project
    # @param project_id [Integer] Project ID
    # @param user_id [Integer] User ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_users_user_id_delete(project_id, user_id, opts = {})
      project_project_id_users_user_id_delete_with_http_info(project_id, user_id, opts)
      nil
    end

    # Removes user from project
    # @param project_id [Integer] Project ID
    # @param user_id [Integer] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_users_user_id_delete_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_users_user_id_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_users_user_id_delete"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ProjectApi.project_project_id_users_user_id_delete"
      end
      # resource path
      local_var_path = '/project/{project_id}/users/{user_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_users_user_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_users_user_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get view
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<View>]
    def project_project_id_views_get(project_id, opts = {})
      data, _status_code, _headers = project_project_id_views_get_with_http_info(project_id, opts)
      data
    end

    # Get view
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<View>, Integer, Hash)>] Array<View> data, response status code and response headers
    def project_project_id_views_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_views_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_views_get"
      end
      # resource path
      local_var_path = '/project/{project_id}/views'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<View>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_views_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_views_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create view
    # @param project_id [Integer] Project ID
    # @param view [ViewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [View]
    def project_project_id_views_post(project_id, view, opts = {})
      data, _status_code, _headers = project_project_id_views_post_with_http_info(project_id, view, opts)
      data
    end

    # create view
    # @param project_id [Integer] Project ID
    # @param view [ViewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(View, Integer, Hash)>] View data, response status code and response headers
    def project_project_id_views_post_with_http_info(project_id, view, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_views_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_views_post"
      end
      # verify the required parameter 'view' is set
      if @api_client.config.client_side_validation && view.nil?
        fail ArgumentError, "Missing the required parameter 'view' when calling ProjectApi.project_project_id_views_post"
      end
      # resource path
      local_var_path = '/project/{project_id}/views'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(view)

      # return_type
      return_type = opts[:debug_return_type] || 'View'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_views_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_views_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes view
    # @param project_id [Integer] Project ID
    # @param view_id [Integer] view ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_views_view_id_delete(project_id, view_id, opts = {})
      project_project_id_views_view_id_delete_with_http_info(project_id, view_id, opts)
      nil
    end

    # Removes view
    # @param project_id [Integer] Project ID
    # @param view_id [Integer] view ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_views_view_id_delete_with_http_info(project_id, view_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_views_view_id_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_views_view_id_delete"
      end
      # verify the required parameter 'view_id' is set
      if @api_client.config.client_side_validation && view_id.nil?
        fail ArgumentError, "Missing the required parameter 'view_id' when calling ProjectApi.project_project_id_views_view_id_delete"
      end
      # resource path
      local_var_path = '/project/{project_id}/views/{view_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'view_id' + '}', CGI.escape(view_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_views_view_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_views_view_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get view
    # @param project_id [Integer] Project ID
    # @param view_id [Integer] view ID
    # @param [Hash] opts the optional parameters
    # @return [View]
    def project_project_id_views_view_id_get(project_id, view_id, opts = {})
      data, _status_code, _headers = project_project_id_views_view_id_get_with_http_info(project_id, view_id, opts)
      data
    end

    # Get view
    # @param project_id [Integer] Project ID
    # @param view_id [Integer] view ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(View, Integer, Hash)>] View data, response status code and response headers
    def project_project_id_views_view_id_get_with_http_info(project_id, view_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_views_view_id_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_views_view_id_get"
      end
      # verify the required parameter 'view_id' is set
      if @api_client.config.client_side_validation && view_id.nil?
        fail ArgumentError, "Missing the required parameter 'view_id' when calling ProjectApi.project_project_id_views_view_id_get"
      end
      # resource path
      local_var_path = '/project/{project_id}/views/{view_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'view_id' + '}', CGI.escape(view_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'View'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_views_view_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_views_view_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates view
    # @param project_id [Integer] Project ID
    # @param view_id [Integer] view ID
    # @param view [ViewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_project_id_views_view_id_put(project_id, view_id, view, opts = {})
      project_project_id_views_view_id_put_with_http_info(project_id, view_id, view, opts)
      nil
    end

    # Updates view
    # @param project_id [Integer] Project ID
    # @param view_id [Integer] view ID
    # @param view [ViewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def project_project_id_views_view_id_put_with_http_info(project_id, view_id, view, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.project_project_id_views_view_id_put ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.project_project_id_views_view_id_put"
      end
      # verify the required parameter 'view_id' is set
      if @api_client.config.client_side_validation && view_id.nil?
        fail ArgumentError, "Missing the required parameter 'view_id' when calling ProjectApi.project_project_id_views_view_id_put"
      end
      # verify the required parameter 'view' is set
      if @api_client.config.client_side_validation && view.nil?
        fail ArgumentError, "Missing the required parameter 'view' when calling ProjectApi.project_project_id_views_view_id_put"
      end
      # resource path
      local_var_path = '/project/{project_id}/views/{view_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'view_id' + '}', CGI.escape(view_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(view)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"ProjectApi.project_project_id_views_view_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#project_project_id_views_view_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
