=begin
#API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.8.34

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class AuthenticationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Performs Login
    # Upon success you will be logged in
    # @param login_body [Login] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auth_login_post(login_body, opts = {})
      auth_login_post_with_http_info(login_body, opts)
      nil
    end

    # Performs Login
    # Upon success you will be logged in
    # @param login_body [Login] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def auth_login_post_with_http_info(login_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.auth_login_post ...'
      end
      # verify the required parameter 'login_body' is set
      if @api_client.config.client_side_validation && login_body.nil?
        fail ArgumentError, "Missing the required parameter 'login_body' when calling AuthenticationApi.auth_login_post"
      end
      # resource path
      local_var_path = '/auth/login'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(login_body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"AuthenticationApi.auth_login_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#auth_login_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Destroys current session
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auth_logout_post(opts = {})
      auth_logout_post_with_http_info(opts)
      nil
    end

    # Destroys current session
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def auth_logout_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.auth_logout_post ...'
      end
      # resource path
      local_var_path = '/auth/logout'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"AuthenticationApi.auth_logout_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#auth_logout_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Expires API token
    # @param api_token_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_tokens_api_token_id_delete(api_token_id, opts = {})
      user_tokens_api_token_id_delete_with_http_info(api_token_id, opts)
      nil
    end

    # Expires API token
    # @param api_token_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_tokens_api_token_id_delete_with_http_info(api_token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.user_tokens_api_token_id_delete ...'
      end
      # verify the required parameter 'api_token_id' is set
      if @api_client.config.client_side_validation && api_token_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_token_id' when calling AuthenticationApi.user_tokens_api_token_id_delete"
      end
      # resource path
      local_var_path = '/user/tokens/{api_token_id}'.sub('{' + 'api_token_id' + '}', CGI.escape(api_token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"AuthenticationApi.user_tokens_api_token_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#user_tokens_api_token_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch API tokens for user
    # @param [Hash] opts the optional parameters
    # @return [Array<APIToken>]
    def user_tokens_get(opts = {})
      data, _status_code, _headers = user_tokens_get_with_http_info(opts)
      data
    end

    # Fetch API tokens for user
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<APIToken>, Integer, Hash)>] Array<APIToken> data, response status code and response headers
    def user_tokens_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.user_tokens_get ...'
      end
      # resource path
      local_var_path = '/user/tokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<APIToken>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"AuthenticationApi.user_tokens_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#user_tokens_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an API token
    # @param [Hash] opts the optional parameters
    # @return [APIToken]
    def user_tokens_post(opts = {})
      data, _status_code, _headers = user_tokens_post_with_http_info(opts)
      data
    end

    # Create an API token
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIToken, Integer, Hash)>] APIToken data, response status code and response headers
    def user_tokens_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.user_tokens_post ...'
      end
      # resource path
      local_var_path = '/user/tokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'cookie']

      new_options = opts.merge(
        :operation => :"AuthenticationApi.user_tokens_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#user_tokens_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
