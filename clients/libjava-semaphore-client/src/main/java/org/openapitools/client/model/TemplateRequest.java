/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.8.34
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TemplateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-22T22:16:56.905602471+02:00[Europe/Prague]")
public class TemplateRequest {
  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Integer projectId;

  public static final String SERIALIZED_NAME_INVENTORY_ID = "inventory_id";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ID)
  private Integer inventoryId;

  public static final String SERIALIZED_NAME_REPOSITORY_ID = "repository_id";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_ID)
  private Integer repositoryId;

  public static final String SERIALIZED_NAME_ENVIRONMENT_ID = "environment_id";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_ID)
  private Integer environmentId;

  public static final String SERIALIZED_NAME_VIEW_ID = "view_id";
  @SerializedName(SERIALIZED_NAME_VIEW_ID)
  private Integer viewId;

  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_PLAYBOOK = "playbook";
  @SerializedName(SERIALIZED_NAME_PLAYBOOK)
  private String playbook;

  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private String arguments;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_OVERRIDE_ARGS = "override_args";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_ARGS)
  private Boolean overrideArgs;

  public TemplateRequest() { 
  }

  public TemplateRequest projectId(Integer projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * minimum: 1
   * @return projectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getProjectId() {
    return projectId;
  }


  public void setProjectId(Integer projectId) {
    this.projectId = projectId;
  }


  public TemplateRequest inventoryId(Integer inventoryId) {
    
    this.inventoryId = inventoryId;
    return this;
  }

   /**
   * Get inventoryId
   * minimum: 1
   * @return inventoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getInventoryId() {
    return inventoryId;
  }


  public void setInventoryId(Integer inventoryId) {
    this.inventoryId = inventoryId;
  }


  public TemplateRequest repositoryId(Integer repositoryId) {
    
    this.repositoryId = repositoryId;
    return this;
  }

   /**
   * Get repositoryId
   * minimum: 1
   * @return repositoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRepositoryId() {
    return repositoryId;
  }


  public void setRepositoryId(Integer repositoryId) {
    this.repositoryId = repositoryId;
  }


  public TemplateRequest environmentId(Integer environmentId) {
    
    this.environmentId = environmentId;
    return this;
  }

   /**
   * Get environmentId
   * minimum: 1
   * @return environmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getEnvironmentId() {
    return environmentId;
  }


  public void setEnvironmentId(Integer environmentId) {
    this.environmentId = environmentId;
  }


  public TemplateRequest viewId(Integer viewId) {
    
    this.viewId = viewId;
    return this;
  }

   /**
   * Get viewId
   * minimum: 1
   * @return viewId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getViewId() {
    return viewId;
  }


  public void setViewId(Integer viewId) {
    this.viewId = viewId;
  }


  public TemplateRequest alias(String alias) {
    
    this.alias = alias;
    return this;
  }

   /**
   * Get alias
   * @return alias
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Test", value = "")

  public String getAlias() {
    return alias;
  }


  public void setAlias(String alias) {
    this.alias = alias;
  }


  public TemplateRequest playbook(String playbook) {
    
    this.playbook = playbook;
    return this;
  }

   /**
   * Get playbook
   * @return playbook
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "test.yml", value = "")

  public String getPlaybook() {
    return playbook;
  }


  public void setPlaybook(String playbook) {
    this.playbook = playbook;
  }


  public TemplateRequest arguments(String arguments) {
    
    this.arguments = arguments;
    return this;
  }

   /**
   * Get arguments
   * @return arguments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[]", value = "")

  public String getArguments() {
    return arguments;
  }


  public void setArguments(String arguments) {
    this.arguments = arguments;
  }


  public TemplateRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Hello, World!", value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TemplateRequest overrideArgs(Boolean overrideArgs) {
    
    this.overrideArgs = overrideArgs;
    return this;
  }

   /**
   * Get overrideArgs
   * @return overrideArgs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getOverrideArgs() {
    return overrideArgs;
  }


  public void setOverrideArgs(Boolean overrideArgs) {
    this.overrideArgs = overrideArgs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateRequest templateRequest = (TemplateRequest) o;
    return Objects.equals(this.projectId, templateRequest.projectId) &&
        Objects.equals(this.inventoryId, templateRequest.inventoryId) &&
        Objects.equals(this.repositoryId, templateRequest.repositoryId) &&
        Objects.equals(this.environmentId, templateRequest.environmentId) &&
        Objects.equals(this.viewId, templateRequest.viewId) &&
        Objects.equals(this.alias, templateRequest.alias) &&
        Objects.equals(this.playbook, templateRequest.playbook) &&
        Objects.equals(this.arguments, templateRequest.arguments) &&
        Objects.equals(this.description, templateRequest.description) &&
        Objects.equals(this.overrideArgs, templateRequest.overrideArgs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectId, inventoryId, repositoryId, environmentId, viewId, alias, playbook, arguments, description, overrideArgs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateRequest {\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    inventoryId: ").append(toIndentedString(inventoryId)).append("\n");
    sb.append("    repositoryId: ").append(toIndentedString(repositoryId)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    viewId: ").append(toIndentedString(viewId)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    playbook: ").append(toIndentedString(playbook)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    overrideArgs: ").append(toIndentedString(overrideArgs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("project_id");
    openapiFields.add("inventory_id");
    openapiFields.add("repository_id");
    openapiFields.add("environment_id");
    openapiFields.add("view_id");
    openapiFields.add("alias");
    openapiFields.add("playbook");
    openapiFields.add("arguments");
    openapiFields.add("description");
    openapiFields.add("override_args");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TemplateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TemplateRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateRequest is not found in the empty JSON string", TemplateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TemplateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplateRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alias").toString()));
      }
      if (jsonObj.get("playbook") != null && !jsonObj.get("playbook").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playbook` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playbook").toString()));
      }
      if (jsonObj.get("arguments") != null && !jsonObj.get("arguments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arguments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arguments").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateRequest>() {
           @Override
           public void write(JsonWriter out, TemplateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TemplateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TemplateRequest
  * @throws IOException if the JSON string is invalid with respect to TemplateRequest
  */
  public static TemplateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateRequest.class);
  }

 /**
  * Convert an instance of TemplateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

