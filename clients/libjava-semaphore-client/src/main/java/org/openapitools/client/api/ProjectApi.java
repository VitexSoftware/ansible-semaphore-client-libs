/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.8.34
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessKey;
import org.openapitools.client.model.AccessKeyRequest;
import org.openapitools.client.model.Environment;
import org.openapitools.client.model.EnvironmentRequest;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.Inventory;
import org.openapitools.client.model.InventoryRequest;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectProjectIdDeleteRequest;
import org.openapitools.client.model.ProjectProjectIdTasksGetRequest;
import org.openapitools.client.model.ProjectProjectIdUsersGetRequest;
import org.openapitools.client.model.Repository;
import org.openapitools.client.model.RepositoryRequest;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskOutput;
import org.openapitools.client.model.Template;
import org.openapitools.client.model.TemplateRequest;
import org.openapitools.client.model.User;
import org.openapitools.client.model.View;
import org.openapitools.client.model.ViewRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for projectProjectIdDelete
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Project deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdDeleteCall(Integer projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdDeleteValidateBeforeCall(Integer projectId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdDeleteCall(projectId, _callback);
        return localVarCall;

    }

    /**
     * Delete project
     * 
     * @param projectId Project ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Project deleted </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdDelete(Integer projectId) throws ApiException {
        projectProjectIdDeleteWithHttpInfo(projectId);
    }

    /**
     * Delete project
     * 
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Project deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdDeleteWithHttpInfo(Integer projectId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdDeleteValidateBeforeCall(projectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete project (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Project deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdDeleteAsync(Integer projectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdDeleteValidateBeforeCall(projectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdEnvironmentEnvironmentIdDelete
     * @param projectId Project ID (required)
     * @param environmentId environment ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> environment removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdEnvironmentEnvironmentIdDeleteCall(Integer projectId, Integer environmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/environment/{environment_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "environment_id" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdEnvironmentEnvironmentIdDeleteValidateBeforeCall(Integer projectId, Integer environmentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdEnvironmentEnvironmentIdDelete(Async)");
        }
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling projectProjectIdEnvironmentEnvironmentIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdEnvironmentEnvironmentIdDeleteCall(projectId, environmentId, _callback);
        return localVarCall;

    }

    /**
     * Removes environment
     * 
     * @param projectId Project ID (required)
     * @param environmentId environment ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> environment removed </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdEnvironmentEnvironmentIdDelete(Integer projectId, Integer environmentId) throws ApiException {
        projectProjectIdEnvironmentEnvironmentIdDeleteWithHttpInfo(projectId, environmentId);
    }

    /**
     * Removes environment
     * 
     * @param projectId Project ID (required)
     * @param environmentId environment ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> environment removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdEnvironmentEnvironmentIdDeleteWithHttpInfo(Integer projectId, Integer environmentId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdEnvironmentEnvironmentIdDeleteValidateBeforeCall(projectId, environmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes environment (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param environmentId environment ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> environment removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdEnvironmentEnvironmentIdDeleteAsync(Integer projectId, Integer environmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdEnvironmentEnvironmentIdDeleteValidateBeforeCall(projectId, environmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdEnvironmentEnvironmentIdPut
     * @param projectId Project ID (required)
     * @param environmentId environment ID (required)
     * @param environment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Environment Updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdEnvironmentEnvironmentIdPutCall(Integer projectId, Integer environmentId, EnvironmentRequest environment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = environment;

        // create path and map variables
        String localVarPath = "/project/{project_id}/environment/{environment_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "environment_id" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdEnvironmentEnvironmentIdPutValidateBeforeCall(Integer projectId, Integer environmentId, EnvironmentRequest environment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdEnvironmentEnvironmentIdPut(Async)");
        }
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling projectProjectIdEnvironmentEnvironmentIdPut(Async)");
        }
        
        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling projectProjectIdEnvironmentEnvironmentIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdEnvironmentEnvironmentIdPutCall(projectId, environmentId, environment, _callback);
        return localVarCall;

    }

    /**
     * Update environment
     * 
     * @param projectId Project ID (required)
     * @param environmentId environment ID (required)
     * @param environment  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Environment Updated </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdEnvironmentEnvironmentIdPut(Integer projectId, Integer environmentId, EnvironmentRequest environment) throws ApiException {
        projectProjectIdEnvironmentEnvironmentIdPutWithHttpInfo(projectId, environmentId, environment);
    }

    /**
     * Update environment
     * 
     * @param projectId Project ID (required)
     * @param environmentId environment ID (required)
     * @param environment  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Environment Updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdEnvironmentEnvironmentIdPutWithHttpInfo(Integer projectId, Integer environmentId, EnvironmentRequest environment) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdEnvironmentEnvironmentIdPutValidateBeforeCall(projectId, environmentId, environment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update environment (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param environmentId environment ID (required)
     * @param environment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Environment Updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdEnvironmentEnvironmentIdPutAsync(Integer projectId, Integer environmentId, EnvironmentRequest environment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdEnvironmentEnvironmentIdPutValidateBeforeCall(projectId, environmentId, environment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdEnvironmentGet
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> environment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdEnvironmentGetCall(Integer projectId, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/environment"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdEnvironmentGetValidateBeforeCall(Integer projectId, String sort, String order, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdEnvironmentGet(Async)");
        }
        
        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling projectProjectIdEnvironmentGet(Async)");
        }
        
        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling projectProjectIdEnvironmentGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdEnvironmentGetCall(projectId, sort, order, _callback);
        return localVarCall;

    }

    /**
     * Get environment
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @return List&lt;Environment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> environment </td><td>  -  </td></tr>
     </table>
     */
    public List<Environment> projectProjectIdEnvironmentGet(Integer projectId, String sort, String order) throws ApiException {
        ApiResponse<List<Environment>> localVarResp = projectProjectIdEnvironmentGetWithHttpInfo(projectId, sort, order);
        return localVarResp.getData();
    }

    /**
     * Get environment
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @return ApiResponse&lt;List&lt;Environment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> environment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Environment>> projectProjectIdEnvironmentGetWithHttpInfo(Integer projectId, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdEnvironmentGetValidateBeforeCall(projectId, sort, order, null);
        Type localVarReturnType = new TypeToken<List<Environment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get environment (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> environment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdEnvironmentGetAsync(Integer projectId, String sort, String order, final ApiCallback<List<Environment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdEnvironmentGetValidateBeforeCall(projectId, sort, order, _callback);
        Type localVarReturnType = new TypeToken<List<Environment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdEnvironmentPost
     * @param projectId Project ID (required)
     * @param environment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Environment created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdEnvironmentPostCall(Integer projectId, EnvironmentRequest environment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = environment;

        // create path and map variables
        String localVarPath = "/project/{project_id}/environment"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdEnvironmentPostValidateBeforeCall(Integer projectId, EnvironmentRequest environment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdEnvironmentPost(Async)");
        }
        
        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling projectProjectIdEnvironmentPost(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdEnvironmentPostCall(projectId, environment, _callback);
        return localVarCall;

    }

    /**
     * Add environment
     * 
     * @param projectId Project ID (required)
     * @param environment  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Environment created </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdEnvironmentPost(Integer projectId, EnvironmentRequest environment) throws ApiException {
        projectProjectIdEnvironmentPostWithHttpInfo(projectId, environment);
    }

    /**
     * Add environment
     * 
     * @param projectId Project ID (required)
     * @param environment  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Environment created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdEnvironmentPostWithHttpInfo(Integer projectId, EnvironmentRequest environment) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdEnvironmentPostValidateBeforeCall(projectId, environment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add environment (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param environment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Environment created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdEnvironmentPostAsync(Integer projectId, EnvironmentRequest environment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdEnvironmentPostValidateBeforeCall(projectId, environment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdEventsGet
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of events in chronological order </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdEventsGetCall(Integer projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/events"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdEventsGetValidateBeforeCall(Integer projectId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdEventsGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdEventsGetCall(projectId, _callback);
        return localVarCall;

    }

    /**
     * Get Events related to this project
     * 
     * @param projectId Project ID (required)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of events in chronological order </td><td>  -  </td></tr>
     </table>
     */
    public List<Event> projectProjectIdEventsGet(Integer projectId) throws ApiException {
        ApiResponse<List<Event>> localVarResp = projectProjectIdEventsGetWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get Events related to this project
     * 
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of events in chronological order </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Event>> projectProjectIdEventsGetWithHttpInfo(Integer projectId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdEventsGetValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Events related to this project (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of events in chronological order </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdEventsGetAsync(Integer projectId, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdEventsGetValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdGet
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdGetCall(Integer projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdGetValidateBeforeCall(Integer projectId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdGetCall(projectId, _callback);
        return localVarCall;

    }

    /**
     * Fetch project
     * 
     * @param projectId Project ID (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project </td><td>  -  </td></tr>
     </table>
     */
    public Project projectProjectIdGet(Integer projectId) throws ApiException {
        ApiResponse<Project> localVarResp = projectProjectIdGetWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Fetch project
     * 
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectProjectIdGetWithHttpInfo(Integer projectId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdGetValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch project (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdGetAsync(Integer projectId, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdGetValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdInventoryGet
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> inventory </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdInventoryGetCall(Integer projectId, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/inventory"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdInventoryGetValidateBeforeCall(Integer projectId, String sort, String order, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdInventoryGet(Async)");
        }
        
        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling projectProjectIdInventoryGet(Async)");
        }
        
        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling projectProjectIdInventoryGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdInventoryGetCall(projectId, sort, order, _callback);
        return localVarCall;

    }

    /**
     * Get inventory
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @return List&lt;Inventory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> inventory </td><td>  -  </td></tr>
     </table>
     */
    public List<Inventory> projectProjectIdInventoryGet(Integer projectId, String sort, String order) throws ApiException {
        ApiResponse<List<Inventory>> localVarResp = projectProjectIdInventoryGetWithHttpInfo(projectId, sort, order);
        return localVarResp.getData();
    }

    /**
     * Get inventory
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @return ApiResponse&lt;List&lt;Inventory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> inventory </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Inventory>> projectProjectIdInventoryGetWithHttpInfo(Integer projectId, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdInventoryGetValidateBeforeCall(projectId, sort, order, null);
        Type localVarReturnType = new TypeToken<List<Inventory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get inventory (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> inventory </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdInventoryGetAsync(Integer projectId, String sort, String order, final ApiCallback<List<Inventory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdInventoryGetValidateBeforeCall(projectId, sort, order, _callback);
        Type localVarReturnType = new TypeToken<List<Inventory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdInventoryInventoryIdDelete
     * @param projectId Project ID (required)
     * @param inventoryId inventory ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> inventory removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdInventoryInventoryIdDeleteCall(Integer projectId, Integer inventoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/inventory/{inventory_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "inventory_id" + "\\}", localVarApiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdInventoryInventoryIdDeleteValidateBeforeCall(Integer projectId, Integer inventoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdInventoryInventoryIdDelete(Async)");
        }
        
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling projectProjectIdInventoryInventoryIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdInventoryInventoryIdDeleteCall(projectId, inventoryId, _callback);
        return localVarCall;

    }

    /**
     * Removes inventory
     * 
     * @param projectId Project ID (required)
     * @param inventoryId inventory ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> inventory removed </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdInventoryInventoryIdDelete(Integer projectId, Integer inventoryId) throws ApiException {
        projectProjectIdInventoryInventoryIdDeleteWithHttpInfo(projectId, inventoryId);
    }

    /**
     * Removes inventory
     * 
     * @param projectId Project ID (required)
     * @param inventoryId inventory ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> inventory removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdInventoryInventoryIdDeleteWithHttpInfo(Integer projectId, Integer inventoryId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdInventoryInventoryIdDeleteValidateBeforeCall(projectId, inventoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes inventory (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param inventoryId inventory ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> inventory removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdInventoryInventoryIdDeleteAsync(Integer projectId, Integer inventoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdInventoryInventoryIdDeleteValidateBeforeCall(projectId, inventoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdInventoryInventoryIdPut
     * @param projectId Project ID (required)
     * @param inventoryId inventory ID (required)
     * @param inventory  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Inventory updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdInventoryInventoryIdPutCall(Integer projectId, Integer inventoryId, InventoryRequest inventory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventory;

        // create path and map variables
        String localVarPath = "/project/{project_id}/inventory/{inventory_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "inventory_id" + "\\}", localVarApiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdInventoryInventoryIdPutValidateBeforeCall(Integer projectId, Integer inventoryId, InventoryRequest inventory, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdInventoryInventoryIdPut(Async)");
        }
        
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling projectProjectIdInventoryInventoryIdPut(Async)");
        }
        
        // verify the required parameter 'inventory' is set
        if (inventory == null) {
            throw new ApiException("Missing the required parameter 'inventory' when calling projectProjectIdInventoryInventoryIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdInventoryInventoryIdPutCall(projectId, inventoryId, inventory, _callback);
        return localVarCall;

    }

    /**
     * Updates inventory
     * 
     * @param projectId Project ID (required)
     * @param inventoryId inventory ID (required)
     * @param inventory  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Inventory updated </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdInventoryInventoryIdPut(Integer projectId, Integer inventoryId, InventoryRequest inventory) throws ApiException {
        projectProjectIdInventoryInventoryIdPutWithHttpInfo(projectId, inventoryId, inventory);
    }

    /**
     * Updates inventory
     * 
     * @param projectId Project ID (required)
     * @param inventoryId inventory ID (required)
     * @param inventory  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Inventory updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdInventoryInventoryIdPutWithHttpInfo(Integer projectId, Integer inventoryId, InventoryRequest inventory) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdInventoryInventoryIdPutValidateBeforeCall(projectId, inventoryId, inventory, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates inventory (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param inventoryId inventory ID (required)
     * @param inventory  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Inventory updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdInventoryInventoryIdPutAsync(Integer projectId, Integer inventoryId, InventoryRequest inventory, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdInventoryInventoryIdPutValidateBeforeCall(projectId, inventoryId, inventory, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdInventoryPost
     * @param projectId Project ID (required)
     * @param inventory  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> inventory created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdInventoryPostCall(Integer projectId, InventoryRequest inventory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventory;

        // create path and map variables
        String localVarPath = "/project/{project_id}/inventory"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdInventoryPostValidateBeforeCall(Integer projectId, InventoryRequest inventory, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdInventoryPost(Async)");
        }
        
        // verify the required parameter 'inventory' is set
        if (inventory == null) {
            throw new ApiException("Missing the required parameter 'inventory' when calling projectProjectIdInventoryPost(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdInventoryPostCall(projectId, inventory, _callback);
        return localVarCall;

    }

    /**
     * create inventory
     * 
     * @param projectId Project ID (required)
     * @param inventory  (required)
     * @return Inventory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> inventory created </td><td>  -  </td></tr>
     </table>
     */
    public Inventory projectProjectIdInventoryPost(Integer projectId, InventoryRequest inventory) throws ApiException {
        ApiResponse<Inventory> localVarResp = projectProjectIdInventoryPostWithHttpInfo(projectId, inventory);
        return localVarResp.getData();
    }

    /**
     * create inventory
     * 
     * @param projectId Project ID (required)
     * @param inventory  (required)
     * @return ApiResponse&lt;Inventory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> inventory created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Inventory> projectProjectIdInventoryPostWithHttpInfo(Integer projectId, InventoryRequest inventory) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdInventoryPostValidateBeforeCall(projectId, inventory, null);
        Type localVarReturnType = new TypeToken<Inventory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create inventory (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param inventory  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> inventory created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdInventoryPostAsync(Integer projectId, InventoryRequest inventory, final ApiCallback<Inventory> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdInventoryPostValidateBeforeCall(projectId, inventory, _callback);
        Type localVarReturnType = new TypeToken<Inventory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdKeysGet
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param keyType Filter by key type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access Keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdKeysGetCall(Integer projectId, String sort, String order, String keyType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/keys"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Key type", keyType));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdKeysGetValidateBeforeCall(Integer projectId, String sort, String order, String keyType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdKeysGet(Async)");
        }
        
        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling projectProjectIdKeysGet(Async)");
        }
        
        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling projectProjectIdKeysGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdKeysGetCall(projectId, sort, order, keyType, _callback);
        return localVarCall;

    }

    /**
     * Get access keys linked to project
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param keyType Filter by key type (optional)
     * @return List&lt;AccessKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access Keys </td><td>  -  </td></tr>
     </table>
     */
    public List<AccessKey> projectProjectIdKeysGet(Integer projectId, String sort, String order, String keyType) throws ApiException {
        ApiResponse<List<AccessKey>> localVarResp = projectProjectIdKeysGetWithHttpInfo(projectId, sort, order, keyType);
        return localVarResp.getData();
    }

    /**
     * Get access keys linked to project
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param keyType Filter by key type (optional)
     * @return ApiResponse&lt;List&lt;AccessKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access Keys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AccessKey>> projectProjectIdKeysGetWithHttpInfo(Integer projectId, String sort, String order, String keyType) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdKeysGetValidateBeforeCall(projectId, sort, order, keyType, null);
        Type localVarReturnType = new TypeToken<List<AccessKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get access keys linked to project (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param keyType Filter by key type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access Keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdKeysGetAsync(Integer projectId, String sort, String order, String keyType, final ApiCallback<List<AccessKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdKeysGetValidateBeforeCall(projectId, sort, order, keyType, _callback);
        Type localVarReturnType = new TypeToken<List<AccessKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdKeysKeyIdDelete
     * @param projectId Project ID (required)
     * @param keyId key ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> access key removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdKeysKeyIdDeleteCall(Integer projectId, Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/keys/{key_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "key_id" + "\\}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdKeysKeyIdDeleteValidateBeforeCall(Integer projectId, Integer keyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdKeysKeyIdDelete(Async)");
        }
        
        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling projectProjectIdKeysKeyIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdKeysKeyIdDeleteCall(projectId, keyId, _callback);
        return localVarCall;

    }

    /**
     * Removes access key
     * 
     * @param projectId Project ID (required)
     * @param keyId key ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> access key removed </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdKeysKeyIdDelete(Integer projectId, Integer keyId) throws ApiException {
        projectProjectIdKeysKeyIdDeleteWithHttpInfo(projectId, keyId);
    }

    /**
     * Removes access key
     * 
     * @param projectId Project ID (required)
     * @param keyId key ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> access key removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdKeysKeyIdDeleteWithHttpInfo(Integer projectId, Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdKeysKeyIdDeleteValidateBeforeCall(projectId, keyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes access key (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param keyId key ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> access key removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdKeysKeyIdDeleteAsync(Integer projectId, Integer keyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdKeysKeyIdDeleteValidateBeforeCall(projectId, keyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdKeysKeyIdPut
     * @param projectId Project ID (required)
     * @param keyId key ID (required)
     * @param accessKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Key updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdKeysKeyIdPutCall(Integer projectId, Integer keyId, AccessKeyRequest accessKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessKey;

        // create path and map variables
        String localVarPath = "/project/{project_id}/keys/{key_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "key_id" + "\\}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdKeysKeyIdPutValidateBeforeCall(Integer projectId, Integer keyId, AccessKeyRequest accessKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdKeysKeyIdPut(Async)");
        }
        
        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling projectProjectIdKeysKeyIdPut(Async)");
        }
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling projectProjectIdKeysKeyIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdKeysKeyIdPutCall(projectId, keyId, accessKey, _callback);
        return localVarCall;

    }

    /**
     * Updates access key
     * 
     * @param projectId Project ID (required)
     * @param keyId key ID (required)
     * @param accessKey  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Key updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad type </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdKeysKeyIdPut(Integer projectId, Integer keyId, AccessKeyRequest accessKey) throws ApiException {
        projectProjectIdKeysKeyIdPutWithHttpInfo(projectId, keyId, accessKey);
    }

    /**
     * Updates access key
     * 
     * @param projectId Project ID (required)
     * @param keyId key ID (required)
     * @param accessKey  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Key updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdKeysKeyIdPutWithHttpInfo(Integer projectId, Integer keyId, AccessKeyRequest accessKey) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdKeysKeyIdPutValidateBeforeCall(projectId, keyId, accessKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates access key (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param keyId key ID (required)
     * @param accessKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Key updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdKeysKeyIdPutAsync(Integer projectId, Integer keyId, AccessKeyRequest accessKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdKeysKeyIdPutValidateBeforeCall(projectId, keyId, accessKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdKeysPost
     * @param projectId Project ID (required)
     * @param accessKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Access Key created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdKeysPostCall(Integer projectId, AccessKeyRequest accessKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessKey;

        // create path and map variables
        String localVarPath = "/project/{project_id}/keys"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdKeysPostValidateBeforeCall(Integer projectId, AccessKeyRequest accessKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdKeysPost(Async)");
        }
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling projectProjectIdKeysPost(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdKeysPostCall(projectId, accessKey, _callback);
        return localVarCall;

    }

    /**
     * Add access key
     * 
     * @param projectId Project ID (required)
     * @param accessKey  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Access Key created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad type </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdKeysPost(Integer projectId, AccessKeyRequest accessKey) throws ApiException {
        projectProjectIdKeysPostWithHttpInfo(projectId, accessKey);
    }

    /**
     * Add access key
     * 
     * @param projectId Project ID (required)
     * @param accessKey  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Access Key created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdKeysPostWithHttpInfo(Integer projectId, AccessKeyRequest accessKey) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdKeysPostValidateBeforeCall(projectId, accessKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add access key (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param accessKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Access Key created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdKeysPostAsync(Integer projectId, AccessKeyRequest accessKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdKeysPostValidateBeforeCall(projectId, accessKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdPut
     * @param projectId Project ID (required)
     * @param project  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Project saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdPutCall(Integer projectId, ProjectProjectIdDeleteRequest project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = project;

        // create path and map variables
        String localVarPath = "/project/{project_id}/"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdPutValidateBeforeCall(Integer projectId, ProjectProjectIdDeleteRequest project, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdPut(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectProjectIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdPutCall(projectId, project, _callback);
        return localVarCall;

    }

    /**
     * Update project
     * 
     * @param projectId Project ID (required)
     * @param project  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Project saved </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdPut(Integer projectId, ProjectProjectIdDeleteRequest project) throws ApiException {
        projectProjectIdPutWithHttpInfo(projectId, project);
    }

    /**
     * Update project
     * 
     * @param projectId Project ID (required)
     * @param project  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Project saved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdPutWithHttpInfo(Integer projectId, ProjectProjectIdDeleteRequest project) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdPutValidateBeforeCall(projectId, project, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update project (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param project  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Project saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdPutAsync(Integer projectId, ProjectProjectIdDeleteRequest project, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdPutValidateBeforeCall(projectId, project, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdRepositoriesGet
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> repositories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdRepositoriesGetCall(Integer projectId, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/repositories"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdRepositoriesGetValidateBeforeCall(Integer projectId, String sort, String order, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdRepositoriesGet(Async)");
        }
        
        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling projectProjectIdRepositoriesGet(Async)");
        }
        
        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling projectProjectIdRepositoriesGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdRepositoriesGetCall(projectId, sort, order, _callback);
        return localVarCall;

    }

    /**
     * Get repositories
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> repositories </td><td>  -  </td></tr>
     </table>
     */
    public List<Repository> projectProjectIdRepositoriesGet(Integer projectId, String sort, String order) throws ApiException {
        ApiResponse<List<Repository>> localVarResp = projectProjectIdRepositoriesGetWithHttpInfo(projectId, sort, order);
        return localVarResp.getData();
    }

    /**
     * Get repositories
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> repositories </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Repository>> projectProjectIdRepositoriesGetWithHttpInfo(Integer projectId, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdRepositoriesGetValidateBeforeCall(projectId, sort, order, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get repositories (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> repositories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdRepositoriesGetAsync(Integer projectId, String sort, String order, final ApiCallback<List<Repository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdRepositoriesGetValidateBeforeCall(projectId, sort, order, _callback);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdRepositoriesPost
     * @param projectId Project ID (required)
     * @param repository  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Repository created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdRepositoriesPostCall(Integer projectId, RepositoryRequest repository, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = repository;

        // create path and map variables
        String localVarPath = "/project/{project_id}/repositories"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdRepositoriesPostValidateBeforeCall(Integer projectId, RepositoryRequest repository, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdRepositoriesPost(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling projectProjectIdRepositoriesPost(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdRepositoriesPostCall(projectId, repository, _callback);
        return localVarCall;

    }

    /**
     * Add repository
     * 
     * @param projectId Project ID (required)
     * @param repository  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Repository created </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdRepositoriesPost(Integer projectId, RepositoryRequest repository) throws ApiException {
        projectProjectIdRepositoriesPostWithHttpInfo(projectId, repository);
    }

    /**
     * Add repository
     * 
     * @param projectId Project ID (required)
     * @param repository  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Repository created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdRepositoriesPostWithHttpInfo(Integer projectId, RepositoryRequest repository) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdRepositoriesPostValidateBeforeCall(projectId, repository, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add repository (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param repository  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Repository created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdRepositoriesPostAsync(Integer projectId, RepositoryRequest repository, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdRepositoriesPostValidateBeforeCall(projectId, repository, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdRepositoriesRepositoryIdDelete
     * @param projectId Project ID (required)
     * @param repositoryId repository ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> repository removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdRepositoriesRepositoryIdDeleteCall(Integer projectId, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/repositories/{repository_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "repository_id" + "\\}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdRepositoriesRepositoryIdDeleteValidateBeforeCall(Integer projectId, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdRepositoriesRepositoryIdDelete(Async)");
        }
        
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling projectProjectIdRepositoriesRepositoryIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdRepositoriesRepositoryIdDeleteCall(projectId, repositoryId, _callback);
        return localVarCall;

    }

    /**
     * Removes repository
     * 
     * @param projectId Project ID (required)
     * @param repositoryId repository ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> repository removed </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdRepositoriesRepositoryIdDelete(Integer projectId, Integer repositoryId) throws ApiException {
        projectProjectIdRepositoriesRepositoryIdDeleteWithHttpInfo(projectId, repositoryId);
    }

    /**
     * Removes repository
     * 
     * @param projectId Project ID (required)
     * @param repositoryId repository ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> repository removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdRepositoriesRepositoryIdDeleteWithHttpInfo(Integer projectId, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdRepositoriesRepositoryIdDeleteValidateBeforeCall(projectId, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes repository (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param repositoryId repository ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> repository removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdRepositoriesRepositoryIdDeleteAsync(Integer projectId, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdRepositoriesRepositoryIdDeleteValidateBeforeCall(projectId, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdTasksGet
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of tasks in chronological order </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTasksGetCall(Integer projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/tasks"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdTasksGetValidateBeforeCall(Integer projectId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdTasksGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdTasksGetCall(projectId, _callback);
        return localVarCall;

    }

    /**
     * Get Tasks related to current project
     * 
     * @param projectId Project ID (required)
     * @return List&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of tasks in chronological order </td><td>  -  </td></tr>
     </table>
     */
    public List<Task> projectProjectIdTasksGet(Integer projectId) throws ApiException {
        ApiResponse<List<Task>> localVarResp = projectProjectIdTasksGetWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get Tasks related to current project
     * 
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;List&lt;Task&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of tasks in chronological order </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Task>> projectProjectIdTasksGetWithHttpInfo(Integer projectId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdTasksGetValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Tasks related to current project (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of tasks in chronological order </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTasksGetAsync(Integer projectId, final ApiCallback<List<Task>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdTasksGetValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdTasksLastGet
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of tasks in chronological order </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTasksLastGetCall(Integer projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/tasks/last"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdTasksLastGetValidateBeforeCall(Integer projectId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdTasksLastGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdTasksLastGetCall(projectId, _callback);
        return localVarCall;

    }

    /**
     * Get last 200 Tasks related to current project
     * 
     * @param projectId Project ID (required)
     * @return List&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of tasks in chronological order </td><td>  -  </td></tr>
     </table>
     */
    public List<Task> projectProjectIdTasksLastGet(Integer projectId) throws ApiException {
        ApiResponse<List<Task>> localVarResp = projectProjectIdTasksLastGetWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get last 200 Tasks related to current project
     * 
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;List&lt;Task&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of tasks in chronological order </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Task>> projectProjectIdTasksLastGetWithHttpInfo(Integer projectId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdTasksLastGetValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get last 200 Tasks related to current project (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of tasks in chronological order </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTasksLastGetAsync(Integer projectId, final ApiCallback<List<Task>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdTasksLastGetValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdTasksPost
     * @param projectId Project ID (required)
     * @param task  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task queued </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTasksPostCall(Integer projectId, ProjectProjectIdTasksGetRequest task, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = task;

        // create path and map variables
        String localVarPath = "/project/{project_id}/tasks"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdTasksPostValidateBeforeCall(Integer projectId, ProjectProjectIdTasksGetRequest task, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdTasksPost(Async)");
        }
        
        // verify the required parameter 'task' is set
        if (task == null) {
            throw new ApiException("Missing the required parameter 'task' when calling projectProjectIdTasksPost(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdTasksPostCall(projectId, task, _callback);
        return localVarCall;

    }

    /**
     * Starts a job
     * 
     * @param projectId Project ID (required)
     * @param task  (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task queued </td><td>  -  </td></tr>
     </table>
     */
    public Task projectProjectIdTasksPost(Integer projectId, ProjectProjectIdTasksGetRequest task) throws ApiException {
        ApiResponse<Task> localVarResp = projectProjectIdTasksPostWithHttpInfo(projectId, task);
        return localVarResp.getData();
    }

    /**
     * Starts a job
     * 
     * @param projectId Project ID (required)
     * @param task  (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task queued </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> projectProjectIdTasksPostWithHttpInfo(Integer projectId, ProjectProjectIdTasksGetRequest task) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdTasksPostValidateBeforeCall(projectId, task, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Starts a job (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param task  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task queued </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTasksPostAsync(Integer projectId, ProjectProjectIdTasksGetRequest task, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdTasksPostValidateBeforeCall(projectId, task, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdTasksTaskIdDelete
     * @param projectId Project ID (required)
     * @param taskId task ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> task deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTasksTaskIdDeleteCall(Integer projectId, Integer taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/tasks/{task_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdTasksTaskIdDeleteValidateBeforeCall(Integer projectId, Integer taskId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdTasksTaskIdDelete(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling projectProjectIdTasksTaskIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdTasksTaskIdDeleteCall(projectId, taskId, _callback);
        return localVarCall;

    }

    /**
     * Deletes task (including output)
     * 
     * @param projectId Project ID (required)
     * @param taskId task ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> task deleted </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdTasksTaskIdDelete(Integer projectId, Integer taskId) throws ApiException {
        projectProjectIdTasksTaskIdDeleteWithHttpInfo(projectId, taskId);
    }

    /**
     * Deletes task (including output)
     * 
     * @param projectId Project ID (required)
     * @param taskId task ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> task deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdTasksTaskIdDeleteWithHttpInfo(Integer projectId, Integer taskId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdTasksTaskIdDeleteValidateBeforeCall(projectId, taskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes task (including output) (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param taskId task ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> task deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTasksTaskIdDeleteAsync(Integer projectId, Integer taskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdTasksTaskIdDeleteValidateBeforeCall(projectId, taskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdTasksTaskIdGet
     * @param projectId Project ID (required)
     * @param taskId task ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTasksTaskIdGetCall(Integer projectId, Integer taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/tasks/{task_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdTasksTaskIdGetValidateBeforeCall(Integer projectId, Integer taskId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdTasksTaskIdGet(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling projectProjectIdTasksTaskIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdTasksTaskIdGetCall(projectId, taskId, _callback);
        return localVarCall;

    }

    /**
     * Get a single task
     * 
     * @param projectId Project ID (required)
     * @param taskId task ID (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task </td><td>  -  </td></tr>
     </table>
     */
    public Task projectProjectIdTasksTaskIdGet(Integer projectId, Integer taskId) throws ApiException {
        ApiResponse<Task> localVarResp = projectProjectIdTasksTaskIdGetWithHttpInfo(projectId, taskId);
        return localVarResp.getData();
    }

    /**
     * Get a single task
     * 
     * @param projectId Project ID (required)
     * @param taskId task ID (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> projectProjectIdTasksTaskIdGetWithHttpInfo(Integer projectId, Integer taskId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdTasksTaskIdGetValidateBeforeCall(projectId, taskId, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single task (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param taskId task ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTasksTaskIdGetAsync(Integer projectId, Integer taskId, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdTasksTaskIdGetValidateBeforeCall(projectId, taskId, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdTasksTaskIdOutputGet
     * @param projectId Project ID (required)
     * @param taskId task ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> output </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTasksTaskIdOutputGetCall(Integer projectId, Integer taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/tasks/{task_id}/output"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdTasksTaskIdOutputGetValidateBeforeCall(Integer projectId, Integer taskId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdTasksTaskIdOutputGet(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling projectProjectIdTasksTaskIdOutputGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdTasksTaskIdOutputGetCall(projectId, taskId, _callback);
        return localVarCall;

    }

    /**
     * Get task output
     * 
     * @param projectId Project ID (required)
     * @param taskId task ID (required)
     * @return List&lt;TaskOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> output </td><td>  -  </td></tr>
     </table>
     */
    public List<TaskOutput> projectProjectIdTasksTaskIdOutputGet(Integer projectId, Integer taskId) throws ApiException {
        ApiResponse<List<TaskOutput>> localVarResp = projectProjectIdTasksTaskIdOutputGetWithHttpInfo(projectId, taskId);
        return localVarResp.getData();
    }

    /**
     * Get task output
     * 
     * @param projectId Project ID (required)
     * @param taskId task ID (required)
     * @return ApiResponse&lt;List&lt;TaskOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> output </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TaskOutput>> projectProjectIdTasksTaskIdOutputGetWithHttpInfo(Integer projectId, Integer taskId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdTasksTaskIdOutputGetValidateBeforeCall(projectId, taskId, null);
        Type localVarReturnType = new TypeToken<List<TaskOutput>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task output (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param taskId task ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> output </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTasksTaskIdOutputGetAsync(Integer projectId, Integer taskId, final ApiCallback<List<TaskOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdTasksTaskIdOutputGetValidateBeforeCall(projectId, taskId, _callback);
        Type localVarReturnType = new TypeToken<List<TaskOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdTemplatesGet
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTemplatesGetCall(Integer projectId, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/templates"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdTemplatesGetValidateBeforeCall(Integer projectId, String sort, String order, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdTemplatesGet(Async)");
        }
        
        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling projectProjectIdTemplatesGet(Async)");
        }
        
        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling projectProjectIdTemplatesGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdTemplatesGetCall(projectId, sort, order, _callback);
        return localVarCall;

    }

    /**
     * Get template
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @return List&lt;Template&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template </td><td>  -  </td></tr>
     </table>
     */
    public List<Template> projectProjectIdTemplatesGet(Integer projectId, String sort, String order) throws ApiException {
        ApiResponse<List<Template>> localVarResp = projectProjectIdTemplatesGetWithHttpInfo(projectId, sort, order);
        return localVarResp.getData();
    }

    /**
     * Get template
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @return ApiResponse&lt;List&lt;Template&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Template>> projectProjectIdTemplatesGetWithHttpInfo(Integer projectId, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdTemplatesGetValidateBeforeCall(projectId, sort, order, null);
        Type localVarReturnType = new TypeToken<List<Template>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get template (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTemplatesGetAsync(Integer projectId, String sort, String order, final ApiCallback<List<Template>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdTemplatesGetValidateBeforeCall(projectId, sort, order, _callback);
        Type localVarReturnType = new TypeToken<List<Template>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdTemplatesPost
     * @param projectId Project ID (required)
     * @param template  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> template created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTemplatesPostCall(Integer projectId, TemplateRequest template, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = template;

        // create path and map variables
        String localVarPath = "/project/{project_id}/templates"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdTemplatesPostValidateBeforeCall(Integer projectId, TemplateRequest template, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdTemplatesPost(Async)");
        }
        
        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling projectProjectIdTemplatesPost(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdTemplatesPostCall(projectId, template, _callback);
        return localVarCall;

    }

    /**
     * create template
     * 
     * @param projectId Project ID (required)
     * @param template  (required)
     * @return Template
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> template created </td><td>  -  </td></tr>
     </table>
     */
    public Template projectProjectIdTemplatesPost(Integer projectId, TemplateRequest template) throws ApiException {
        ApiResponse<Template> localVarResp = projectProjectIdTemplatesPostWithHttpInfo(projectId, template);
        return localVarResp.getData();
    }

    /**
     * create template
     * 
     * @param projectId Project ID (required)
     * @param template  (required)
     * @return ApiResponse&lt;Template&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> template created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Template> projectProjectIdTemplatesPostWithHttpInfo(Integer projectId, TemplateRequest template) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdTemplatesPostValidateBeforeCall(projectId, template, null);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create template (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param template  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> template created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTemplatesPostAsync(Integer projectId, TemplateRequest template, final ApiCallback<Template> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdTemplatesPostValidateBeforeCall(projectId, template, _callback);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdTemplatesTemplateIdDelete
     * @param projectId Project ID (required)
     * @param templateId template ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> template removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTemplatesTemplateIdDeleteCall(Integer projectId, Integer templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/templates/{template_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "template_id" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdTemplatesTemplateIdDeleteValidateBeforeCall(Integer projectId, Integer templateId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdTemplatesTemplateIdDelete(Async)");
        }
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling projectProjectIdTemplatesTemplateIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdTemplatesTemplateIdDeleteCall(projectId, templateId, _callback);
        return localVarCall;

    }

    /**
     * Removes template
     * 
     * @param projectId Project ID (required)
     * @param templateId template ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> template removed </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdTemplatesTemplateIdDelete(Integer projectId, Integer templateId) throws ApiException {
        projectProjectIdTemplatesTemplateIdDeleteWithHttpInfo(projectId, templateId);
    }

    /**
     * Removes template
     * 
     * @param projectId Project ID (required)
     * @param templateId template ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> template removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdTemplatesTemplateIdDeleteWithHttpInfo(Integer projectId, Integer templateId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdTemplatesTemplateIdDeleteValidateBeforeCall(projectId, templateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes template (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param templateId template ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> template removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTemplatesTemplateIdDeleteAsync(Integer projectId, Integer templateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdTemplatesTemplateIdDeleteValidateBeforeCall(projectId, templateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdTemplatesTemplateIdGet
     * @param projectId Project ID (required)
     * @param templateId template ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTemplatesTemplateIdGetCall(Integer projectId, Integer templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/templates/{template_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "template_id" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdTemplatesTemplateIdGetValidateBeforeCall(Integer projectId, Integer templateId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdTemplatesTemplateIdGet(Async)");
        }
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling projectProjectIdTemplatesTemplateIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdTemplatesTemplateIdGetCall(projectId, templateId, _callback);
        return localVarCall;

    }

    /**
     * Get template
     * 
     * @param projectId Project ID (required)
     * @param templateId template ID (required)
     * @return Template
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template object </td><td>  -  </td></tr>
     </table>
     */
    public Template projectProjectIdTemplatesTemplateIdGet(Integer projectId, Integer templateId) throws ApiException {
        ApiResponse<Template> localVarResp = projectProjectIdTemplatesTemplateIdGetWithHttpInfo(projectId, templateId);
        return localVarResp.getData();
    }

    /**
     * Get template
     * 
     * @param projectId Project ID (required)
     * @param templateId template ID (required)
     * @return ApiResponse&lt;Template&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Template> projectProjectIdTemplatesTemplateIdGetWithHttpInfo(Integer projectId, Integer templateId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdTemplatesTemplateIdGetValidateBeforeCall(projectId, templateId, null);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get template (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param templateId template ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTemplatesTemplateIdGetAsync(Integer projectId, Integer templateId, final ApiCallback<Template> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdTemplatesTemplateIdGetValidateBeforeCall(projectId, templateId, _callback);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdTemplatesTemplateIdPut
     * @param projectId Project ID (required)
     * @param templateId template ID (required)
     * @param template  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> template updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTemplatesTemplateIdPutCall(Integer projectId, Integer templateId, TemplateRequest template, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = template;

        // create path and map variables
        String localVarPath = "/project/{project_id}/templates/{template_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "template_id" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdTemplatesTemplateIdPutValidateBeforeCall(Integer projectId, Integer templateId, TemplateRequest template, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdTemplatesTemplateIdPut(Async)");
        }
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling projectProjectIdTemplatesTemplateIdPut(Async)");
        }
        
        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling projectProjectIdTemplatesTemplateIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdTemplatesTemplateIdPutCall(projectId, templateId, template, _callback);
        return localVarCall;

    }

    /**
     * Updates template
     * 
     * @param projectId Project ID (required)
     * @param templateId template ID (required)
     * @param template  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> template updated </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdTemplatesTemplateIdPut(Integer projectId, Integer templateId, TemplateRequest template) throws ApiException {
        projectProjectIdTemplatesTemplateIdPutWithHttpInfo(projectId, templateId, template);
    }

    /**
     * Updates template
     * 
     * @param projectId Project ID (required)
     * @param templateId template ID (required)
     * @param template  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> template updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdTemplatesTemplateIdPutWithHttpInfo(Integer projectId, Integer templateId, TemplateRequest template) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdTemplatesTemplateIdPutValidateBeforeCall(projectId, templateId, template, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates template (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param templateId template ID (required)
     * @param template  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> template updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdTemplatesTemplateIdPutAsync(Integer projectId, Integer templateId, TemplateRequest template, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdTemplatesTemplateIdPutValidateBeforeCall(projectId, templateId, template, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdUsersGet
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdUsersGetCall(Integer projectId, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/users"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdUsersGetValidateBeforeCall(Integer projectId, String sort, String order, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdUsersGet(Async)");
        }
        
        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling projectProjectIdUsersGet(Async)");
        }
        
        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling projectProjectIdUsersGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdUsersGetCall(projectId, sort, order, _callback);
        return localVarCall;

    }

    /**
     * Get users linked to project
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users </td><td>  -  </td></tr>
     </table>
     */
    public List<User> projectProjectIdUsersGet(Integer projectId, String sort, String order) throws ApiException {
        ApiResponse<List<User>> localVarResp = projectProjectIdUsersGetWithHttpInfo(projectId, sort, order);
        return localVarResp.getData();
    }

    /**
     * Get users linked to project
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> projectProjectIdUsersGetWithHttpInfo(Integer projectId, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdUsersGetValidateBeforeCall(projectId, sort, order, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get users linked to project (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param sort sorting name (required)
     * @param order ordering manner (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdUsersGetAsync(Integer projectId, String sort, String order, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdUsersGetValidateBeforeCall(projectId, sort, order, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdUsersPost
     * @param projectId Project ID (required)
     * @param user  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User added </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdUsersPostCall(Integer projectId, ProjectProjectIdUsersGetRequest user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/project/{project_id}/users"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdUsersPostValidateBeforeCall(Integer projectId, ProjectProjectIdUsersGetRequest user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdUsersPost(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling projectProjectIdUsersPost(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdUsersPostCall(projectId, user, _callback);
        return localVarCall;

    }

    /**
     * Link user to project
     * 
     * @param projectId Project ID (required)
     * @param user  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User added </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdUsersPost(Integer projectId, ProjectProjectIdUsersGetRequest user) throws ApiException {
        projectProjectIdUsersPostWithHttpInfo(projectId, user);
    }

    /**
     * Link user to project
     * 
     * @param projectId Project ID (required)
     * @param user  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User added </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdUsersPostWithHttpInfo(Integer projectId, ProjectProjectIdUsersGetRequest user) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdUsersPostValidateBeforeCall(projectId, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Link user to project (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param user  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User added </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdUsersPostAsync(Integer projectId, ProjectProjectIdUsersGetRequest user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdUsersPostValidateBeforeCall(projectId, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdUsersUserIdAdminDelete
     * @param projectId Project ID (required)
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User admin privileges revoked </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdUsersUserIdAdminDeleteCall(Integer projectId, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/users/{user_id}/admin"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdUsersUserIdAdminDeleteValidateBeforeCall(Integer projectId, Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdUsersUserIdAdminDelete(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling projectProjectIdUsersUserIdAdminDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdUsersUserIdAdminDeleteCall(projectId, userId, _callback);
        return localVarCall;

    }

    /**
     * Revoke admin privileges
     * 
     * @param projectId Project ID (required)
     * @param userId User ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User admin privileges revoked </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdUsersUserIdAdminDelete(Integer projectId, Integer userId) throws ApiException {
        projectProjectIdUsersUserIdAdminDeleteWithHttpInfo(projectId, userId);
    }

    /**
     * Revoke admin privileges
     * 
     * @param projectId Project ID (required)
     * @param userId User ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User admin privileges revoked </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdUsersUserIdAdminDeleteWithHttpInfo(Integer projectId, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdUsersUserIdAdminDeleteValidateBeforeCall(projectId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revoke admin privileges (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User admin privileges revoked </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdUsersUserIdAdminDeleteAsync(Integer projectId, Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdUsersUserIdAdminDeleteValidateBeforeCall(projectId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdUsersUserIdAdminPost
     * @param projectId Project ID (required)
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User made administrator </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdUsersUserIdAdminPostCall(Integer projectId, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/users/{user_id}/admin"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdUsersUserIdAdminPostValidateBeforeCall(Integer projectId, Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdUsersUserIdAdminPost(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling projectProjectIdUsersUserIdAdminPost(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdUsersUserIdAdminPostCall(projectId, userId, _callback);
        return localVarCall;

    }

    /**
     * Makes user admin
     * 
     * @param projectId Project ID (required)
     * @param userId User ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User made administrator </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdUsersUserIdAdminPost(Integer projectId, Integer userId) throws ApiException {
        projectProjectIdUsersUserIdAdminPostWithHttpInfo(projectId, userId);
    }

    /**
     * Makes user admin
     * 
     * @param projectId Project ID (required)
     * @param userId User ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User made administrator </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdUsersUserIdAdminPostWithHttpInfo(Integer projectId, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdUsersUserIdAdminPostValidateBeforeCall(projectId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Makes user admin (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User made administrator </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdUsersUserIdAdminPostAsync(Integer projectId, Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdUsersUserIdAdminPostValidateBeforeCall(projectId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdUsersUserIdDelete
     * @param projectId Project ID (required)
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdUsersUserIdDeleteCall(Integer projectId, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/users/{user_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdUsersUserIdDeleteValidateBeforeCall(Integer projectId, Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdUsersUserIdDelete(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling projectProjectIdUsersUserIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdUsersUserIdDeleteCall(projectId, userId, _callback);
        return localVarCall;

    }

    /**
     * Removes user from project
     * 
     * @param projectId Project ID (required)
     * @param userId User ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User removed </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdUsersUserIdDelete(Integer projectId, Integer userId) throws ApiException {
        projectProjectIdUsersUserIdDeleteWithHttpInfo(projectId, userId);
    }

    /**
     * Removes user from project
     * 
     * @param projectId Project ID (required)
     * @param userId User ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdUsersUserIdDeleteWithHttpInfo(Integer projectId, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdUsersUserIdDeleteValidateBeforeCall(projectId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes user from project (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdUsersUserIdDeleteAsync(Integer projectId, Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdUsersUserIdDeleteValidateBeforeCall(projectId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdViewsGet
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> view </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdViewsGetCall(Integer projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/views"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdViewsGetValidateBeforeCall(Integer projectId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdViewsGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdViewsGetCall(projectId, _callback);
        return localVarCall;

    }

    /**
     * Get view
     * 
     * @param projectId Project ID (required)
     * @return List&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> view </td><td>  -  </td></tr>
     </table>
     */
    public List<View> projectProjectIdViewsGet(Integer projectId) throws ApiException {
        ApiResponse<List<View>> localVarResp = projectProjectIdViewsGetWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get view
     * 
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;List&lt;View&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> view </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<View>> projectProjectIdViewsGetWithHttpInfo(Integer projectId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdViewsGetValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<View>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get view (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> view </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdViewsGetAsync(Integer projectId, final ApiCallback<List<View>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdViewsGetValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<View>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdViewsPost
     * @param projectId Project ID (required)
     * @param view  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> view created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdViewsPostCall(Integer projectId, ViewRequest view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = view;

        // create path and map variables
        String localVarPath = "/project/{project_id}/views"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdViewsPostValidateBeforeCall(Integer projectId, ViewRequest view, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdViewsPost(Async)");
        }
        
        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling projectProjectIdViewsPost(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdViewsPostCall(projectId, view, _callback);
        return localVarCall;

    }

    /**
     * create view
     * 
     * @param projectId Project ID (required)
     * @param view  (required)
     * @return View
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> view created </td><td>  -  </td></tr>
     </table>
     */
    public View projectProjectIdViewsPost(Integer projectId, ViewRequest view) throws ApiException {
        ApiResponse<View> localVarResp = projectProjectIdViewsPostWithHttpInfo(projectId, view);
        return localVarResp.getData();
    }

    /**
     * create view
     * 
     * @param projectId Project ID (required)
     * @param view  (required)
     * @return ApiResponse&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> view created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<View> projectProjectIdViewsPostWithHttpInfo(Integer projectId, ViewRequest view) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdViewsPostValidateBeforeCall(projectId, view, null);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create view (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param view  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> view created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdViewsPostAsync(Integer projectId, ViewRequest view, final ApiCallback<View> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdViewsPostValidateBeforeCall(projectId, view, _callback);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdViewsViewIdDelete
     * @param projectId Project ID (required)
     * @param viewId view ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> view removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdViewsViewIdDeleteCall(Integer projectId, Integer viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/views/{view_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "view_id" + "\\}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdViewsViewIdDeleteValidateBeforeCall(Integer projectId, Integer viewId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdViewsViewIdDelete(Async)");
        }
        
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling projectProjectIdViewsViewIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdViewsViewIdDeleteCall(projectId, viewId, _callback);
        return localVarCall;

    }

    /**
     * Removes view
     * 
     * @param projectId Project ID (required)
     * @param viewId view ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> view removed </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdViewsViewIdDelete(Integer projectId, Integer viewId) throws ApiException {
        projectProjectIdViewsViewIdDeleteWithHttpInfo(projectId, viewId);
    }

    /**
     * Removes view
     * 
     * @param projectId Project ID (required)
     * @param viewId view ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> view removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdViewsViewIdDeleteWithHttpInfo(Integer projectId, Integer viewId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdViewsViewIdDeleteValidateBeforeCall(projectId, viewId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes view (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param viewId view ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> view removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdViewsViewIdDeleteAsync(Integer projectId, Integer viewId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdViewsViewIdDeleteValidateBeforeCall(projectId, viewId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdViewsViewIdGet
     * @param projectId Project ID (required)
     * @param viewId view ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> view object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdViewsViewIdGetCall(Integer projectId, Integer viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/views/{view_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "view_id" + "\\}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdViewsViewIdGetValidateBeforeCall(Integer projectId, Integer viewId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdViewsViewIdGet(Async)");
        }
        
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling projectProjectIdViewsViewIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdViewsViewIdGetCall(projectId, viewId, _callback);
        return localVarCall;

    }

    /**
     * Get view
     * 
     * @param projectId Project ID (required)
     * @param viewId view ID (required)
     * @return View
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> view object </td><td>  -  </td></tr>
     </table>
     */
    public View projectProjectIdViewsViewIdGet(Integer projectId, Integer viewId) throws ApiException {
        ApiResponse<View> localVarResp = projectProjectIdViewsViewIdGetWithHttpInfo(projectId, viewId);
        return localVarResp.getData();
    }

    /**
     * Get view
     * 
     * @param projectId Project ID (required)
     * @param viewId view ID (required)
     * @return ApiResponse&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> view object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<View> projectProjectIdViewsViewIdGetWithHttpInfo(Integer projectId, Integer viewId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdViewsViewIdGetValidateBeforeCall(projectId, viewId, null);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get view (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param viewId view ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> view object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdViewsViewIdGetAsync(Integer projectId, Integer viewId, final ApiCallback<View> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdViewsViewIdGetValidateBeforeCall(projectId, viewId, _callback);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdViewsViewIdPut
     * @param projectId Project ID (required)
     * @param viewId view ID (required)
     * @param view  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> view updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdViewsViewIdPutCall(Integer projectId, Integer viewId, ViewRequest view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = view;

        // create path and map variables
        String localVarPath = "/project/{project_id}/views/{view_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "view_id" + "\\}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdViewsViewIdPutValidateBeforeCall(Integer projectId, Integer viewId, ViewRequest view, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdViewsViewIdPut(Async)");
        }
        
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling projectProjectIdViewsViewIdPut(Async)");
        }
        
        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling projectProjectIdViewsViewIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdViewsViewIdPutCall(projectId, viewId, view, _callback);
        return localVarCall;

    }

    /**
     * Updates view
     * 
     * @param projectId Project ID (required)
     * @param viewId view ID (required)
     * @param view  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> view updated </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdViewsViewIdPut(Integer projectId, Integer viewId, ViewRequest view) throws ApiException {
        projectProjectIdViewsViewIdPutWithHttpInfo(projectId, viewId, view);
    }

    /**
     * Updates view
     * 
     * @param projectId Project ID (required)
     * @param viewId view ID (required)
     * @param view  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> view updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdViewsViewIdPutWithHttpInfo(Integer projectId, Integer viewId, ViewRequest view) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdViewsViewIdPutValidateBeforeCall(projectId, viewId, view, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates view (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param viewId view ID (required)
     * @param view  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> view updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdViewsViewIdPutAsync(Integer projectId, Integer viewId, ViewRequest view, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdViewsViewIdPutValidateBeforeCall(projectId, viewId, view, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
