/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.8.34
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Schedule;
import org.openapitools.client.model.ScheduleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ScheduleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScheduleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for projectProjectIdSchedulesPost
     * @param projectId Project ID (required)
     * @param schedule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> schedule created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdSchedulesPostCall(Integer projectId, ScheduleRequest schedule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/project/{project_id}/schedules"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdSchedulesPostValidateBeforeCall(Integer projectId, ScheduleRequest schedule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdSchedulesPost(Async)");
        }
        
        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling projectProjectIdSchedulesPost(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdSchedulesPostCall(projectId, schedule, _callback);
        return localVarCall;

    }

    /**
     * create schedule
     * 
     * @param projectId Project ID (required)
     * @param schedule  (required)
     * @return Schedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> schedule created </td><td>  -  </td></tr>
     </table>
     */
    public Schedule projectProjectIdSchedulesPost(Integer projectId, ScheduleRequest schedule) throws ApiException {
        ApiResponse<Schedule> localVarResp = projectProjectIdSchedulesPostWithHttpInfo(projectId, schedule);
        return localVarResp.getData();
    }

    /**
     * create schedule
     * 
     * @param projectId Project ID (required)
     * @param schedule  (required)
     * @return ApiResponse&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> schedule created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedule> projectProjectIdSchedulesPostWithHttpInfo(Integer projectId, ScheduleRequest schedule) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdSchedulesPostValidateBeforeCall(projectId, schedule, null);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create schedule (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param schedule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> schedule created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdSchedulesPostAsync(Integer projectId, ScheduleRequest schedule, final ApiCallback<Schedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdSchedulesPostValidateBeforeCall(projectId, schedule, _callback);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdSchedulesScheduleIdDelete
     * @param projectId Project ID (required)
     * @param scheduleId schedule ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> schedule deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdSchedulesScheduleIdDeleteCall(Integer projectId, Integer scheduleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/schedules/{schedule_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "schedule_id" + "\\}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdSchedulesScheduleIdDeleteValidateBeforeCall(Integer projectId, Integer scheduleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdSchedulesScheduleIdDelete(Async)");
        }
        
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling projectProjectIdSchedulesScheduleIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdSchedulesScheduleIdDeleteCall(projectId, scheduleId, _callback);
        return localVarCall;

    }

    /**
     * Deletes schedule
     * 
     * @param projectId Project ID (required)
     * @param scheduleId schedule ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> schedule deleted </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdSchedulesScheduleIdDelete(Integer projectId, Integer scheduleId) throws ApiException {
        projectProjectIdSchedulesScheduleIdDeleteWithHttpInfo(projectId, scheduleId);
    }

    /**
     * Deletes schedule
     * 
     * @param projectId Project ID (required)
     * @param scheduleId schedule ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> schedule deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdSchedulesScheduleIdDeleteWithHttpInfo(Integer projectId, Integer scheduleId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdSchedulesScheduleIdDeleteValidateBeforeCall(projectId, scheduleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes schedule (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param scheduleId schedule ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> schedule deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdSchedulesScheduleIdDeleteAsync(Integer projectId, Integer scheduleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdSchedulesScheduleIdDeleteValidateBeforeCall(projectId, scheduleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdSchedulesScheduleIdGet
     * @param projectId Project ID (required)
     * @param scheduleId schedule ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schedule </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdSchedulesScheduleIdGetCall(Integer projectId, Integer scheduleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}/schedules/{schedule_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "schedule_id" + "\\}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdSchedulesScheduleIdGetValidateBeforeCall(Integer projectId, Integer scheduleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdSchedulesScheduleIdGet(Async)");
        }
        
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling projectProjectIdSchedulesScheduleIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdSchedulesScheduleIdGetCall(projectId, scheduleId, _callback);
        return localVarCall;

    }

    /**
     * Get schedule
     * 
     * @param projectId Project ID (required)
     * @param scheduleId schedule ID (required)
     * @return Schedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schedule </td><td>  -  </td></tr>
     </table>
     */
    public Schedule projectProjectIdSchedulesScheduleIdGet(Integer projectId, Integer scheduleId) throws ApiException {
        ApiResponse<Schedule> localVarResp = projectProjectIdSchedulesScheduleIdGetWithHttpInfo(projectId, scheduleId);
        return localVarResp.getData();
    }

    /**
     * Get schedule
     * 
     * @param projectId Project ID (required)
     * @param scheduleId schedule ID (required)
     * @return ApiResponse&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schedule </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedule> projectProjectIdSchedulesScheduleIdGetWithHttpInfo(Integer projectId, Integer scheduleId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdSchedulesScheduleIdGetValidateBeforeCall(projectId, scheduleId, null);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get schedule (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param scheduleId schedule ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schedule </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdSchedulesScheduleIdGetAsync(Integer projectId, Integer scheduleId, final ApiCallback<Schedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdSchedulesScheduleIdGetValidateBeforeCall(projectId, scheduleId, _callback);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectIdSchedulesScheduleIdPut
     * @param projectId Project ID (required)
     * @param scheduleId schedule ID (required)
     * @param schedule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> schedule updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdSchedulesScheduleIdPutCall(Integer projectId, Integer scheduleId, ScheduleRequest schedule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/project/{project_id}/schedules/{schedule_id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "schedule_id" + "\\}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer", "cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectIdSchedulesScheduleIdPutValidateBeforeCall(Integer projectId, Integer scheduleId, ScheduleRequest schedule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectProjectIdSchedulesScheduleIdPut(Async)");
        }
        
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling projectProjectIdSchedulesScheduleIdPut(Async)");
        }
        
        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling projectProjectIdSchedulesScheduleIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectIdSchedulesScheduleIdPutCall(projectId, scheduleId, schedule, _callback);
        return localVarCall;

    }

    /**
     * Updates schedule
     * 
     * @param projectId Project ID (required)
     * @param scheduleId schedule ID (required)
     * @param schedule  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> schedule updated </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectIdSchedulesScheduleIdPut(Integer projectId, Integer scheduleId, ScheduleRequest schedule) throws ApiException {
        projectProjectIdSchedulesScheduleIdPutWithHttpInfo(projectId, scheduleId, schedule);
    }

    /**
     * Updates schedule
     * 
     * @param projectId Project ID (required)
     * @param scheduleId schedule ID (required)
     * @param schedule  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> schedule updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectIdSchedulesScheduleIdPutWithHttpInfo(Integer projectId, Integer scheduleId, ScheduleRequest schedule) throws ApiException {
        okhttp3.Call localVarCall = projectProjectIdSchedulesScheduleIdPutValidateBeforeCall(projectId, scheduleId, schedule, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates schedule (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param scheduleId schedule ID (required)
     * @param schedule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> schedule updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectIdSchedulesScheduleIdPutAsync(Integer projectId, Integer scheduleId, ScheduleRequest schedule, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectIdSchedulesScheduleIdPutValidateBeforeCall(projectId, scheduleId, schedule, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
