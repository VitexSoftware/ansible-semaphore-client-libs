/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.8.34
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessKey;
import org.openapitools.client.model.AccessKeyRequest;
import org.openapitools.client.model.Environment;
import org.openapitools.client.model.EnvironmentRequest;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.Inventory;
import org.openapitools.client.model.InventoryRequest;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectProjectIdDeleteRequest;
import org.openapitools.client.model.ProjectProjectIdTasksGetRequest;
import org.openapitools.client.model.ProjectProjectIdUsersGetRequest;
import org.openapitools.client.model.Repository;
import org.openapitools.client.model.RepositoryRequest;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskOutput;
import org.openapitools.client.model.Template;
import org.openapitools.client.model.TemplateRequest;
import org.openapitools.client.model.User;
import org.openapitools.client.model.View;
import org.openapitools.client.model.ViewRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectApi
 */
@Disabled
public class ProjectApiTest {

    private final ProjectApi api = new ProjectApi();

    /**
     * Delete project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdDeleteTest() throws ApiException {
        Integer projectId = null;
        api.projectProjectIdDelete(projectId);
        // TODO: test validations
    }

    /**
     * Removes environment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdEnvironmentEnvironmentIdDeleteTest() throws ApiException {
        Integer projectId = null;
        Integer environmentId = null;
        api.projectProjectIdEnvironmentEnvironmentIdDelete(projectId, environmentId);
        // TODO: test validations
    }

    /**
     * Update environment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdEnvironmentEnvironmentIdPutTest() throws ApiException {
        Integer projectId = null;
        Integer environmentId = null;
        EnvironmentRequest environment = null;
        api.projectProjectIdEnvironmentEnvironmentIdPut(projectId, environmentId, environment);
        // TODO: test validations
    }

    /**
     * Get environment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdEnvironmentGetTest() throws ApiException {
        Integer projectId = null;
        String sort = null;
        String order = null;
        List<Environment> response = api.projectProjectIdEnvironmentGet(projectId, sort, order);
        // TODO: test validations
    }

    /**
     * Add environment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdEnvironmentPostTest() throws ApiException {
        Integer projectId = null;
        EnvironmentRequest environment = null;
        api.projectProjectIdEnvironmentPost(projectId, environment);
        // TODO: test validations
    }

    /**
     * Get Events related to this project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdEventsGetTest() throws ApiException {
        Integer projectId = null;
        List<Event> response = api.projectProjectIdEventsGet(projectId);
        // TODO: test validations
    }

    /**
     * Fetch project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdGetTest() throws ApiException {
        Integer projectId = null;
        Project response = api.projectProjectIdGet(projectId);
        // TODO: test validations
    }

    /**
     * Get inventory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdInventoryGetTest() throws ApiException {
        Integer projectId = null;
        String sort = null;
        String order = null;
        List<Inventory> response = api.projectProjectIdInventoryGet(projectId, sort, order);
        // TODO: test validations
    }

    /**
     * Removes inventory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdInventoryInventoryIdDeleteTest() throws ApiException {
        Integer projectId = null;
        Integer inventoryId = null;
        api.projectProjectIdInventoryInventoryIdDelete(projectId, inventoryId);
        // TODO: test validations
    }

    /**
     * Updates inventory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdInventoryInventoryIdPutTest() throws ApiException {
        Integer projectId = null;
        Integer inventoryId = null;
        InventoryRequest inventory = null;
        api.projectProjectIdInventoryInventoryIdPut(projectId, inventoryId, inventory);
        // TODO: test validations
    }

    /**
     * create inventory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdInventoryPostTest() throws ApiException {
        Integer projectId = null;
        InventoryRequest inventory = null;
        Inventory response = api.projectProjectIdInventoryPost(projectId, inventory);
        // TODO: test validations
    }

    /**
     * Get access keys linked to project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdKeysGetTest() throws ApiException {
        Integer projectId = null;
        String sort = null;
        String order = null;
        String keyType = null;
        List<AccessKey> response = api.projectProjectIdKeysGet(projectId, sort, order, keyType);
        // TODO: test validations
    }

    /**
     * Removes access key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdKeysKeyIdDeleteTest() throws ApiException {
        Integer projectId = null;
        Integer keyId = null;
        api.projectProjectIdKeysKeyIdDelete(projectId, keyId);
        // TODO: test validations
    }

    /**
     * Updates access key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdKeysKeyIdPutTest() throws ApiException {
        Integer projectId = null;
        Integer keyId = null;
        AccessKeyRequest accessKey = null;
        api.projectProjectIdKeysKeyIdPut(projectId, keyId, accessKey);
        // TODO: test validations
    }

    /**
     * Add access key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdKeysPostTest() throws ApiException {
        Integer projectId = null;
        AccessKeyRequest accessKey = null;
        api.projectProjectIdKeysPost(projectId, accessKey);
        // TODO: test validations
    }

    /**
     * Update project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdPutTest() throws ApiException {
        Integer projectId = null;
        ProjectProjectIdDeleteRequest project = null;
        api.projectProjectIdPut(projectId, project);
        // TODO: test validations
    }

    /**
     * Get repositories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdRepositoriesGetTest() throws ApiException {
        Integer projectId = null;
        String sort = null;
        String order = null;
        List<Repository> response = api.projectProjectIdRepositoriesGet(projectId, sort, order);
        // TODO: test validations
    }

    /**
     * Add repository
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdRepositoriesPostTest() throws ApiException {
        Integer projectId = null;
        RepositoryRequest repository = null;
        api.projectProjectIdRepositoriesPost(projectId, repository);
        // TODO: test validations
    }

    /**
     * Removes repository
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdRepositoriesRepositoryIdDeleteTest() throws ApiException {
        Integer projectId = null;
        Integer repositoryId = null;
        api.projectProjectIdRepositoriesRepositoryIdDelete(projectId, repositoryId);
        // TODO: test validations
    }

    /**
     * Get Tasks related to current project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdTasksGetTest() throws ApiException {
        Integer projectId = null;
        List<Task> response = api.projectProjectIdTasksGet(projectId);
        // TODO: test validations
    }

    /**
     * Get last 200 Tasks related to current project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdTasksLastGetTest() throws ApiException {
        Integer projectId = null;
        List<Task> response = api.projectProjectIdTasksLastGet(projectId);
        // TODO: test validations
    }

    /**
     * Starts a job
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdTasksPostTest() throws ApiException {
        Integer projectId = null;
        ProjectProjectIdTasksGetRequest task = null;
        Task response = api.projectProjectIdTasksPost(projectId, task);
        // TODO: test validations
    }

    /**
     * Deletes task (including output)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdTasksTaskIdDeleteTest() throws ApiException {
        Integer projectId = null;
        Integer taskId = null;
        api.projectProjectIdTasksTaskIdDelete(projectId, taskId);
        // TODO: test validations
    }

    /**
     * Get a single task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdTasksTaskIdGetTest() throws ApiException {
        Integer projectId = null;
        Integer taskId = null;
        Task response = api.projectProjectIdTasksTaskIdGet(projectId, taskId);
        // TODO: test validations
    }

    /**
     * Get task output
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdTasksTaskIdOutputGetTest() throws ApiException {
        Integer projectId = null;
        Integer taskId = null;
        List<TaskOutput> response = api.projectProjectIdTasksTaskIdOutputGet(projectId, taskId);
        // TODO: test validations
    }

    /**
     * Get template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdTemplatesGetTest() throws ApiException {
        Integer projectId = null;
        String sort = null;
        String order = null;
        List<Template> response = api.projectProjectIdTemplatesGet(projectId, sort, order);
        // TODO: test validations
    }

    /**
     * create template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdTemplatesPostTest() throws ApiException {
        Integer projectId = null;
        TemplateRequest template = null;
        Template response = api.projectProjectIdTemplatesPost(projectId, template);
        // TODO: test validations
    }

    /**
     * Removes template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdTemplatesTemplateIdDeleteTest() throws ApiException {
        Integer projectId = null;
        Integer templateId = null;
        api.projectProjectIdTemplatesTemplateIdDelete(projectId, templateId);
        // TODO: test validations
    }

    /**
     * Get template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdTemplatesTemplateIdGetTest() throws ApiException {
        Integer projectId = null;
        Integer templateId = null;
        Template response = api.projectProjectIdTemplatesTemplateIdGet(projectId, templateId);
        // TODO: test validations
    }

    /**
     * Updates template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdTemplatesTemplateIdPutTest() throws ApiException {
        Integer projectId = null;
        Integer templateId = null;
        TemplateRequest template = null;
        api.projectProjectIdTemplatesTemplateIdPut(projectId, templateId, template);
        // TODO: test validations
    }

    /**
     * Get users linked to project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdUsersGetTest() throws ApiException {
        Integer projectId = null;
        String sort = null;
        String order = null;
        List<User> response = api.projectProjectIdUsersGet(projectId, sort, order);
        // TODO: test validations
    }

    /**
     * Link user to project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdUsersPostTest() throws ApiException {
        Integer projectId = null;
        ProjectProjectIdUsersGetRequest user = null;
        api.projectProjectIdUsersPost(projectId, user);
        // TODO: test validations
    }

    /**
     * Revoke admin privileges
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdUsersUserIdAdminDeleteTest() throws ApiException {
        Integer projectId = null;
        Integer userId = null;
        api.projectProjectIdUsersUserIdAdminDelete(projectId, userId);
        // TODO: test validations
    }

    /**
     * Makes user admin
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdUsersUserIdAdminPostTest() throws ApiException {
        Integer projectId = null;
        Integer userId = null;
        api.projectProjectIdUsersUserIdAdminPost(projectId, userId);
        // TODO: test validations
    }

    /**
     * Removes user from project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdUsersUserIdDeleteTest() throws ApiException {
        Integer projectId = null;
        Integer userId = null;
        api.projectProjectIdUsersUserIdDelete(projectId, userId);
        // TODO: test validations
    }

    /**
     * Get view
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdViewsGetTest() throws ApiException {
        Integer projectId = null;
        List<View> response = api.projectProjectIdViewsGet(projectId);
        // TODO: test validations
    }

    /**
     * create view
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdViewsPostTest() throws ApiException {
        Integer projectId = null;
        ViewRequest view = null;
        View response = api.projectProjectIdViewsPost(projectId, view);
        // TODO: test validations
    }

    /**
     * Removes view
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdViewsViewIdDeleteTest() throws ApiException {
        Integer projectId = null;
        Integer viewId = null;
        api.projectProjectIdViewsViewIdDelete(projectId, viewId);
        // TODO: test validations
    }

    /**
     * Get view
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdViewsViewIdGetTest() throws ApiException {
        Integer projectId = null;
        Integer viewId = null;
        View response = api.projectProjectIdViewsViewIdGet(projectId, viewId);
        // TODO: test validations
    }

    /**
     * Updates view
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectProjectIdViewsViewIdPutTest() throws ApiException {
        Integer projectId = null;
        Integer viewId = null;
        ViewRequest view = null;
        api.projectProjectIdViewsViewIdPut(projectId, viewId, view);
        // TODO: test validations
    }

}
