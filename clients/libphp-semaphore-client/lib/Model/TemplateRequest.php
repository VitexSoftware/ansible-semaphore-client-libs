<?php
/**
 * TemplateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.8.34
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TemplateRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TemplateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TemplateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'project_id' => 'int',
        'inventory_id' => 'int',
        'repository_id' => 'int',
        'environment_id' => 'int',
        'view_id' => 'int',
        'alias' => 'string',
        'playbook' => 'string',
        'arguments' => 'string',
        'description' => 'string',
        'override_args' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'project_id' => null,
        'inventory_id' => null,
        'repository_id' => null,
        'environment_id' => null,
        'view_id' => null,
        'alias' => null,
        'playbook' => null,
        'arguments' => null,
        'description' => null,
        'override_args' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'project_id' => 'project_id',
        'inventory_id' => 'inventory_id',
        'repository_id' => 'repository_id',
        'environment_id' => 'environment_id',
        'view_id' => 'view_id',
        'alias' => 'alias',
        'playbook' => 'playbook',
        'arguments' => 'arguments',
        'description' => 'description',
        'override_args' => 'override_args'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'project_id' => 'setProjectId',
        'inventory_id' => 'setInventoryId',
        'repository_id' => 'setRepositoryId',
        'environment_id' => 'setEnvironmentId',
        'view_id' => 'setViewId',
        'alias' => 'setAlias',
        'playbook' => 'setPlaybook',
        'arguments' => 'setArguments',
        'description' => 'setDescription',
        'override_args' => 'setOverrideArgs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'project_id' => 'getProjectId',
        'inventory_id' => 'getInventoryId',
        'repository_id' => 'getRepositoryId',
        'environment_id' => 'getEnvironmentId',
        'view_id' => 'getViewId',
        'alias' => 'getAlias',
        'playbook' => 'getPlaybook',
        'arguments' => 'getArguments',
        'description' => 'getDescription',
        'override_args' => 'getOverrideArgs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['project_id'] = $data['project_id'] ?? null;
        $this->container['inventory_id'] = $data['inventory_id'] ?? null;
        $this->container['repository_id'] = $data['repository_id'] ?? null;
        $this->container['environment_id'] = $data['environment_id'] ?? null;
        $this->container['view_id'] = $data['view_id'] ?? null;
        $this->container['alias'] = $data['alias'] ?? null;
        $this->container['playbook'] = $data['playbook'] ?? null;
        $this->container['arguments'] = $data['arguments'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['override_args'] = $data['override_args'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['project_id']) && ($this->container['project_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'project_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['inventory_id']) && ($this->container['inventory_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'inventory_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['repository_id']) && ($this->container['repository_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'repository_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['environment_id']) && ($this->container['environment_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'environment_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['view_id']) && ($this->container['view_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'view_id', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {

        if (!is_null($project_id) && ($project_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $project_id when calling TemplateRequest., must be bigger than or equal to 1.');
        }

        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets inventory_id
     *
     * @return int|null
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param int|null $inventory_id inventory_id
     *
     * @return self
     */
    public function setInventoryId($inventory_id)
    {

        if (!is_null($inventory_id) && ($inventory_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $inventory_id when calling TemplateRequest., must be bigger than or equal to 1.');
        }

        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets repository_id
     *
     * @return int|null
     */
    public function getRepositoryId()
    {
        return $this->container['repository_id'];
    }

    /**
     * Sets repository_id
     *
     * @param int|null $repository_id repository_id
     *
     * @return self
     */
    public function setRepositoryId($repository_id)
    {

        if (!is_null($repository_id) && ($repository_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $repository_id when calling TemplateRequest., must be bigger than or equal to 1.');
        }

        $this->container['repository_id'] = $repository_id;

        return $this;
    }

    /**
     * Gets environment_id
     *
     * @return int|null
     */
    public function getEnvironmentId()
    {
        return $this->container['environment_id'];
    }

    /**
     * Sets environment_id
     *
     * @param int|null $environment_id environment_id
     *
     * @return self
     */
    public function setEnvironmentId($environment_id)
    {

        if (!is_null($environment_id) && ($environment_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $environment_id when calling TemplateRequest., must be bigger than or equal to 1.');
        }

        $this->container['environment_id'] = $environment_id;

        return $this;
    }

    /**
     * Gets view_id
     *
     * @return int|null
     */
    public function getViewId()
    {
        return $this->container['view_id'];
    }

    /**
     * Sets view_id
     *
     * @param int|null $view_id view_id
     *
     * @return self
     */
    public function setViewId($view_id)
    {

        if (!is_null($view_id) && ($view_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $view_id when calling TemplateRequest., must be bigger than or equal to 1.');
        }

        $this->container['view_id'] = $view_id;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string|null
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string|null $alias alias
     *
     * @return self
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets playbook
     *
     * @return string|null
     */
    public function getPlaybook()
    {
        return $this->container['playbook'];
    }

    /**
     * Sets playbook
     *
     * @param string|null $playbook playbook
     *
     * @return self
     */
    public function setPlaybook($playbook)
    {
        $this->container['playbook'] = $playbook;

        return $this;
    }

    /**
     * Gets arguments
     *
     * @return string|null
     */
    public function getArguments()
    {
        return $this->container['arguments'];
    }

    /**
     * Sets arguments
     *
     * @param string|null $arguments arguments
     *
     * @return self
     */
    public function setArguments($arguments)
    {
        $this->container['arguments'] = $arguments;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets override_args
     *
     * @return bool|null
     */
    public function getOverrideArgs()
    {
        return $this->container['override_args'];
    }

    /**
     * Sets override_args
     *
     * @param bool|null $override_args override_args
     *
     * @return self
     */
    public function setOverrideArgs($override_args)
    {
        $this->container['override_args'] = $override_args;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


