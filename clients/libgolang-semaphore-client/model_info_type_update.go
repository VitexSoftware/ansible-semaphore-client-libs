/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.8.34
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InfoTypeUpdate struct for InfoTypeUpdate
type InfoTypeUpdate struct {
	TagName *string `json:"tag_name,omitempty"`
}

// NewInfoTypeUpdate instantiates a new InfoTypeUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoTypeUpdate() *InfoTypeUpdate {
	this := InfoTypeUpdate{}
	return &this
}

// NewInfoTypeUpdateWithDefaults instantiates a new InfoTypeUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoTypeUpdateWithDefaults() *InfoTypeUpdate {
	this := InfoTypeUpdate{}
	return &this
}

// GetTagName returns the TagName field value if set, zero value otherwise.
func (o *InfoTypeUpdate) GetTagName() string {
	if o == nil || o.TagName == nil {
		var ret string
		return ret
	}
	return *o.TagName
}

// GetTagNameOk returns a tuple with the TagName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoTypeUpdate) GetTagNameOk() (*string, bool) {
	if o == nil || o.TagName == nil {
		return nil, false
	}
	return o.TagName, true
}

// HasTagName returns a boolean if a field has been set.
func (o *InfoTypeUpdate) HasTagName() bool {
	if o != nil && o.TagName != nil {
		return true
	}

	return false
}

// SetTagName gets a reference to the given string and assigns it to the TagName field.
func (o *InfoTypeUpdate) SetTagName(v string) {
	o.TagName = &v
}

func (o InfoTypeUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TagName != nil {
		toSerialize["tag_name"] = o.TagName
	}
	return json.Marshal(toSerialize)
}

type NullableInfoTypeUpdate struct {
	value *InfoTypeUpdate
	isSet bool
}

func (v NullableInfoTypeUpdate) Get() *InfoTypeUpdate {
	return v.value
}

func (v *NullableInfoTypeUpdate) Set(val *InfoTypeUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoTypeUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoTypeUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoTypeUpdate(val *InfoTypeUpdate) *NullableInfoTypeUpdate {
	return &NullableInfoTypeUpdate{value: val, isSet: true}
}

func (v NullableInfoTypeUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoTypeUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


