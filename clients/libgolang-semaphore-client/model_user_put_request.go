/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.8.34
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserPutRequest struct for UserPutRequest
type UserPutRequest struct {
	Name *string `json:"name,omitempty"`
	Username *string `json:"username,omitempty"`
	Email *string `json:"email,omitempty"`
	Alert *bool `json:"alert,omitempty"`
	Admin *bool `json:"admin,omitempty"`
}

// NewUserPutRequest instantiates a new UserPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPutRequest() *UserPutRequest {
	this := UserPutRequest{}
	return &this
}

// NewUserPutRequestWithDefaults instantiates a new UserPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPutRequestWithDefaults() *UserPutRequest {
	this := UserPutRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserPutRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPutRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserPutRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserPutRequest) SetName(v string) {
	o.Name = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserPutRequest) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPutRequest) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserPutRequest) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserPutRequest) SetUsername(v string) {
	o.Username = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserPutRequest) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPutRequest) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserPutRequest) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserPutRequest) SetEmail(v string) {
	o.Email = &v
}

// GetAlert returns the Alert field value if set, zero value otherwise.
func (o *UserPutRequest) GetAlert() bool {
	if o == nil || o.Alert == nil {
		var ret bool
		return ret
	}
	return *o.Alert
}

// GetAlertOk returns a tuple with the Alert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPutRequest) GetAlertOk() (*bool, bool) {
	if o == nil || o.Alert == nil {
		return nil, false
	}
	return o.Alert, true
}

// HasAlert returns a boolean if a field has been set.
func (o *UserPutRequest) HasAlert() bool {
	if o != nil && o.Alert != nil {
		return true
	}

	return false
}

// SetAlert gets a reference to the given bool and assigns it to the Alert field.
func (o *UserPutRequest) SetAlert(v bool) {
	o.Alert = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *UserPutRequest) GetAdmin() bool {
	if o == nil || o.Admin == nil {
		var ret bool
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPutRequest) GetAdminOk() (*bool, bool) {
	if o == nil || o.Admin == nil {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *UserPutRequest) HasAdmin() bool {
	if o != nil && o.Admin != nil {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given bool and assigns it to the Admin field.
func (o *UserPutRequest) SetAdmin(v bool) {
	o.Admin = &v
}

func (o UserPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Alert != nil {
		toSerialize["alert"] = o.Alert
	}
	if o.Admin != nil {
		toSerialize["admin"] = o.Admin
	}
	return json.Marshal(toSerialize)
}

type NullableUserPutRequest struct {
	value *UserPutRequest
	isSet bool
}

func (v NullableUserPutRequest) Get() *UserPutRequest {
	return v.value
}

func (v *NullableUserPutRequest) Set(val *UserPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPutRequest(val *UserPutRequest) *NullableUserPutRequest {
	return &NullableUserPutRequest{value: val, isSet: true}
}

func (v NullableUserPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


